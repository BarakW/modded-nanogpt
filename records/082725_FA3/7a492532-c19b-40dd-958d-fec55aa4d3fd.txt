import os
import sys
with open(sys.argv[0]) as f:
    code = f.read() # read the code of this file ASAP, for logging
import uuid
import time
import copy
import glob
from dataclasses import dataclass
from functools import lru_cache
from pathlib import Path

os.environ["PYTORCH_CUDA_ALLOC_CONF"] = "expandable_segments:True"
import torch
torch.empty(1, device="cuda", requires_grad=True).backward() # prevents a bug on some systems
from torch import Tensor, nn
import torch.nn.functional as F
import torch.distributed as dist
#torch._inductor.config.coordinate_descent_tuning = True # we have banned this flag for new records because it causes compilation to take 30min
import numpy as np
import triton
import triton.language as tl
from flash_attn_interface import flash_attn_func
import torch._dynamo as dynamo
dynamo.config.recompile_limit = 64

# -----------------------------------------------------------------------------
# Custom operators: FP8 matmul by @YouJiacheng

@torch.library.custom_op("nanogpt::mm", mutates_args=())
def mm_op(x: Tensor, w: Tensor, x_s: float, w_s: float, grad_s: float) -> tuple[Tensor, Tensor, Tensor]:
    @torch.compile
    def impl(x: Tensor, w: Tensor):
        assert x.is_contiguous() and w.is_contiguous()
        x_f8 = x.div(x_s).to(torch.float8_e4m3fn)
        w_f8 = w.div(w_s).to(torch.float8_e4m3fn)
        out = torch._scaled_mm(
            x_f8,
            w_f8.T,
            out_dtype=torch.bfloat16,
            scale_a=x.new_tensor(x_s, dtype=torch.float32),
            scale_b=x.new_tensor(w_s, dtype=torch.float32),
            use_fast_accum=True,
        )
        return out, x_f8, w_f8

    return impl(x, w)

@mm_op.register_fake
def _(x: Tensor, w: Tensor, *_):
    assert x.ndim == w.ndim == 2
    assert x.shape[1] == w.shape[1]
    assert x.device == w.device
    assert x.is_contiguous() and w.is_contiguous()
    return x @ w.T, x.to(torch.float8_e4m3fn), w.to(torch.float8_e4m3fn)

@torch.library.custom_op("nanogpt::mm_backward", mutates_args=())
def mm_backward_op(g: Tensor, x_f8: Tensor, w_f8: Tensor, x_s: float, w_s: float, grad_s: float) -> tuple[Tensor, Tensor]:
    @torch.compile
    def impl(grad: Tensor, x_f8: Tensor, w_f8: Tensor):
        assert grad.is_contiguous()
        x_inv_s = grad.new_tensor(x_s, dtype=torch.float32)
        w_inv_s = grad.new_tensor(w_s, dtype=torch.float32)
        grad_inv_s = grad.new_tensor(grad_s, dtype=torch.float32)
        grad_f8 = grad.div(grad_s).to(torch.float8_e5m2)
        grad_x = torch._scaled_mm(
            grad_f8,
            w_f8.T.contiguous().T,
            out_dtype=torch.bfloat16,
            scale_a=grad_inv_s,
            scale_b=w_inv_s,
            use_fast_accum=False,
        )
        # faster than grad_f8_t @ x_f8, for (d_out, d_in) == (50304, 768)
        grad_w = torch._scaled_mm(
            x_f8.T.contiguous(),
            grad_f8.T.contiguous().T,
            out_dtype=torch.float32,
            scale_a=x_inv_s,
            scale_b=grad_inv_s,
            use_fast_accum=False,
        ).T
        return grad_x, grad_w

    return impl(g, x_f8, w_f8)

@mm_backward_op.register_fake
def _(g: Tensor, x_f8: Tensor, w_f8: Tensor, *_):
    return x_f8.to(torch.bfloat16), w_f8.T.contiguous().T.to(torch.float32)

def backward(ctx, grad_out: Tensor, *_):
    x_f8, w_f8 = ctx.saved_tensors
    x_s, w_s, grad_s = ctx.scales
    grad_x, grad_w = torch.ops.nanogpt.mm_backward(
        grad_out, x_f8, w_f8, x_s, w_s, grad_s
    )
    return grad_x, grad_w, None, None, None

def setup_context(ctx: torch.autograd.function.FunctionCtx, inputs, output):
    *_, x_s, w_s, grad_s = inputs
    _, x_f8, w_f8 = output
    ctx.save_for_backward(x_f8, w_f8)
    ctx.scales = x_s, w_s, grad_s
    ctx.set_materialize_grads(False)

mm_op.register_autograd(backward, setup_context=setup_context)

# -----------------------------------------------------------------------------
# Triton kernel for symmetric matrix multiplication by @byronxu99

def _get_autotune_configs():
    return [
        triton.Config(
            {
                "BLOCK_SIZE_M": bm,
                "BLOCK_SIZE_N": bn,
                "BLOCK_SIZE_K": bk,
                "GROUP_SIZE_M": 8,
                "LOWER_UPPER": 1,
            },
            num_stages=stages,
            num_warps=warps,
        )
        for bm in [64, 128]
        for bn in [64, 128, 256]
        for bk in [64, 128]
        for stages, warps in [(3, 4), (3, 8), (4, 4)]
        if bm // bn <= 2 and bn // bm <= 2
    ]

@triton.jit
def _pid_to_block(
    pid,
    M,
    BLOCK_SIZE_M: tl.constexpr,
    BLOCK_SIZE_N: tl.constexpr,
    GROUP_SIZE_M: tl.constexpr,
):
    # Split output matrix into blocks of size (BLOCK_SIZE_M, BLOCK_SIZE_N)
    num_pid_m = tl.cdiv(M, BLOCK_SIZE_M)
    num_pid_n = tl.cdiv(M, BLOCK_SIZE_N)

    # Map PID to a single matrix in batch
    batch_idx = pid // (num_pid_m * num_pid_n)
    pid = pid % (num_pid_m * num_pid_n)

    # Map PID to 2D grid of blocks
    pid_m = pid // num_pid_n
    pid_n = pid % num_pid_n
    pid_m, pid_n = tl.swizzle2d(pid_m, pid_n, num_pid_m, num_pid_n, GROUP_SIZE_M)

    m_idx = pid_m * BLOCK_SIZE_M
    n_idx = pid_n * BLOCK_SIZE_N
    return batch_idx, m_idx, n_idx

@triton.autotune(
    configs=_get_autotune_configs(),
    key=["M", "K", "a_stride_r", "a_stride_c", "c_stride_r", "c_stride_c"],
)
@triton.jit
def ns_line_1_kernel(
    A_ptr, C_ptr,
    M, K,
    a_stride_b, a_stride_r, a_stride_c,
    c_stride_b, c_stride_r, c_stride_c,
    BLOCK_SIZE_M: tl.constexpr,
    BLOCK_SIZE_N: tl.constexpr,
    BLOCK_SIZE_K: tl.constexpr,
    GROUP_SIZE_M: tl.constexpr,
    LOWER_UPPER: tl.constexpr,
):
    pid = tl.program_id(axis=0)
    batch_idx, m_idx, n_idx = _pid_to_block(
        pid, M, BLOCK_SIZE_M, BLOCK_SIZE_N, GROUP_SIZE_M
    )

    # Skip blocks that don't need to be computed
    skip_block_below_diag = (LOWER_UPPER == 0) and (n_idx + BLOCK_SIZE_N <= m_idx)
    skip_block_above_diag = (LOWER_UPPER != 0) and (m_idx + BLOCK_SIZE_M <= n_idx)
    if skip_block_below_diag or skip_block_above_diag:
        return

    # Index into one matrix of batch
    A_ptr += batch_idx * a_stride_b
    C_ptr += batch_idx * c_stride_b

    # Create pointer arrays for A and A.T
    offs_m = (m_idx + tl.arange(0, BLOCK_SIZE_M)) % M
    offs_n = (n_idx + tl.arange(0, BLOCK_SIZE_N)) % M
    offs_k = tl.arange(0, BLOCK_SIZE_K)
    a_ptrs = A_ptr + (offs_m[:, None] * a_stride_r + offs_k[None, :] * a_stride_c)
    at_ptrs = A_ptr + (offs_k[:, None] * a_stride_c + offs_n[None, :] * a_stride_r)

    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)

    # Accumulate over blocks of K
    for k in tl.range(0, tl.cdiv(K, BLOCK_SIZE_K)):
        a = tl.load(a_ptrs, mask=offs_k[None, :] < K - k * BLOCK_SIZE_K, other=0.0)
        at = tl.load(at_ptrs, mask=offs_k[:, None] < K - k * BLOCK_SIZE_K, other=0.0)
        accumulator = tl.dot(a, at, accumulator)
        a_ptrs += BLOCK_SIZE_K * a_stride_c
        at_ptrs += BLOCK_SIZE_K * a_stride_c

    out_dtype = C_ptr.dtype.element_ty
    output = accumulator.to(out_dtype)

    # Store block of C
    offs_cm = m_idx + tl.arange(0, BLOCK_SIZE_M)
    offs_cn = n_idx + tl.arange(0, BLOCK_SIZE_N)
    c_ptrs = C_ptr + (offs_cm[:, None] * c_stride_r + offs_cn[None, :] * c_stride_c)
    c_mask = (offs_cm[:, None] < M) & (offs_cn[None, :] < M)
    tl.store(c_ptrs, output, mask=c_mask)

    # Store block of C mirrored across the diagonal
    c_ptrs_t = C_ptr + (offs_cn[:, None] * c_stride_r + offs_cm[None, :] * c_stride_c)
    c_mask_t = (offs_cn[:, None] < M) & (offs_cm[None, :] < M)
    tl.store(c_ptrs_t, output.T, mask=c_mask_t)

def ns_line_1(A: torch.Tensor, out: torch.Tensor):
    """
    Launch Triton kernel to compute C = A @ A.T
    """
    assert A.ndim == 2 or A.ndim == 3
    M, K = A.shape[-2:]
    assert out.size(-2) == M, "Output matrix has incorrect shape"
    assert out.size(-1) == M, "Output matrix has incorrect shape"

    batch_size = A.size(0) if A.ndim == 3 else 1
    input_batch_stride = A.stride(0) if A.ndim == 3 else 0
    output_batch_stride = out.stride(0) if out.ndim == 3 else 0

    grid = lambda meta: (
        batch_size * triton.cdiv(M, meta["BLOCK_SIZE_M"]) * triton.cdiv(M, meta["BLOCK_SIZE_N"]),
    )
    ns_line_1_kernel[grid](
        A_ptr=A,
        C_ptr=out,
        M=M,
        K=K,
        a_stride_b=input_batch_stride,
        a_stride_r=A.stride(-2),
        a_stride_c=A.stride(-1),
        c_stride_b=output_batch_stride,
        c_stride_r=out.stride(-2),
        c_stride_c=out.stride(-1),
    )
    return out

@triton.autotune(
    configs=_get_autotune_configs(),
    key=["M", "a_stride_r", "a_stride_c", "c_stride_r", "c_stride_c"],
)
@triton.jit
def ns_line_2_kernel(
    A_ptr, C_ptr,
    M,
    a_stride_b, a_stride_r, a_stride_c,
    c_stride_b, c_stride_r, c_stride_c,
    alpha, beta,
    BLOCK_SIZE_M: tl.constexpr,
    BLOCK_SIZE_N: tl.constexpr,
    BLOCK_SIZE_K: tl.constexpr,
    GROUP_SIZE_M: tl.constexpr,
    LOWER_UPPER: tl.constexpr,
):
    # This is mostly duplicated from ns_line_1_kernel, but also loads and adds a block of A
    # Performance is slightly slower than ns_line_1_kernel, so we use two separate kernels
    pid = tl.program_id(axis=0)
    batch_idx, m_idx, n_idx = _pid_to_block(
        pid, M, BLOCK_SIZE_M, BLOCK_SIZE_N, GROUP_SIZE_M
    )

    # Skip blocks that don't need to be computed
    skip_block_below_diag = (LOWER_UPPER == 0) and (n_idx + BLOCK_SIZE_N <= m_idx)
    skip_block_above_diag = (LOWER_UPPER != 0) and (m_idx + BLOCK_SIZE_M <= n_idx)
    if skip_block_below_diag or skip_block_above_diag:
        return

    # Index into one matrix of batch
    A_ptr += batch_idx * a_stride_b
    C_ptr += batch_idx * c_stride_b

    # Create pointer arrays for A and A.T
    offs_m = (m_idx + tl.arange(0, BLOCK_SIZE_M)) % M
    offs_n = (n_idx + tl.arange(0, BLOCK_SIZE_N)) % M
    offs_k = tl.arange(0, BLOCK_SIZE_K)
    a_ptrs = A_ptr + (offs_m[:, None] * a_stride_r + offs_k[None, :] * a_stride_c)
    at_ptrs = A_ptr + (offs_k[:, None] * a_stride_c + offs_n[None, :] * a_stride_r)

    accumulator = tl.zeros((BLOCK_SIZE_M, BLOCK_SIZE_N), dtype=tl.float32)

    # Accumulate over blocks of K
    for k in tl.range(0, tl.cdiv(M, BLOCK_SIZE_K)):
        a = tl.load(a_ptrs, mask=offs_k[None, :] < M - k * BLOCK_SIZE_K, other=0.0)
        at = tl.load(at_ptrs, mask=offs_k[:, None] < M - k * BLOCK_SIZE_K, other=0.0)
        accumulator = tl.dot(a, at, accumulator)
        a_ptrs += BLOCK_SIZE_K * a_stride_c
        at_ptrs += BLOCK_SIZE_K * a_stride_c

    # Load block of A to add (corresponds to the current block of C)
    offs_am = m_idx + tl.arange(0, BLOCK_SIZE_M)
    offs_an = n_idx + tl.arange(0, BLOCK_SIZE_N)
    a_add_ptrs = A_ptr + (offs_am[:, None] * a_stride_r + offs_an[None, :] * a_stride_c)
    a_add_mask = (offs_am[:, None] < M) & (offs_an[None, :] < M)
    a_add = tl.load(a_add_ptrs, mask=a_add_mask, other=0.0).to(tl.float32)

    # Apply alpha and beta
    accumulator *= alpha
    accumulator += a_add * beta

    out_dtype = C_ptr.dtype.element_ty
    output = accumulator.to(out_dtype)

    # Store block of C
    offs_cm = m_idx + tl.arange(0, BLOCK_SIZE_M)
    offs_cn = n_idx + tl.arange(0, BLOCK_SIZE_N)
    c_ptrs = C_ptr + (offs_cm[:, None] * c_stride_r + offs_cn[None, :] * c_stride_c)
    c_mask = (offs_cm[:, None] < M) & (offs_cn[None, :] < M)
    tl.store(c_ptrs, output, mask=c_mask)

    # Store block of C mirrored across the diagonal
    c_ptrs_t = C_ptr + (offs_cn[:, None] * c_stride_r + offs_cm[None, :] * c_stride_c)
    c_mask_t = (offs_cn[:, None] < M) & (offs_cm[None, :] < M)
    tl.store(c_ptrs_t, output.T, mask=c_mask_t)

def ns_line_2(A: torch.Tensor, alpha: float, beta: float, out: torch.Tensor):
    """
    Launch Triton kernel to compute C = alpha * A @ A.T + beta * A
    """
    assert A.ndim == 2 or A.ndim == 3
    M, K = A.shape[-2:]
    assert M == K, "Input matrix must be square"
    assert out.size(-2) == M
    assert out.size(-1) == M

    batch_size = A.size(0) if A.ndim == 3 else 1
    input_batch_stride = A.stride(0) if A.ndim == 3 else 0
    output_batch_stride = out.stride(0) if out.ndim == 3 else 0

    grid = lambda meta: (
        batch_size * triton.cdiv(M, meta["BLOCK_SIZE_M"]) * triton.cdiv(M, meta["BLOCK_SIZE_N"]),
    )
    ns_line_2_kernel[grid](
        A_ptr=A,
        C_ptr=out,
        M=M,
        a_stride_b=input_batch_stride,
        a_stride_r=A.stride(-2),
        a_stride_c=A.stride(-1),
        c_stride_b=output_batch_stride,
        c_stride_r=out.stride(-2),
        c_stride_c=out.stride(-1),
        alpha=alpha,
        beta=beta,
    )
    return out

@torch.compile(dynamic=False, fullgraph=True) # Must use dynamic=False or else it's much slower
def newton_schulz_triton(G: torch.Tensor):
    a, b, c = (3.4445, -4.7750, 2.0315)
    X = G.bfloat16()
    if G.size(-2) > G.size(-1):
        X = X.mT

    # Ensure spectral norm is at most 1
    X = X / (X.norm(dim=(-2, -1), keepdim=True) + 1e-7)

    # Allocate buffers
    X = X.contiguous()
    A = torch.empty((*X.shape[:-1], X.size(-2)), device=X.device, dtype=X.dtype)
    B = torch.empty_like(A)
    C = torch.empty_like(X)

    ns_line_3 = torch.baddbmm if X.ndim > 2 else torch.addmm

    # Perform the NS iterations
    for _ in range(5):
        ns_line_1(X, out=A)  # A = X @ X.mT
        ns_line_2(A, alpha=c, beta=b, out=B)  # B = b * A + c * A @ A
        ns_line_3(X, B, X, beta=a, out=C)  # C = a * X + B @ X
        X, C = C, X  # Swap references to avoid unnecessary copies

    if G.size(-2) > G.size(-1):
        X = X.mT
    return X

# -----------------------------------------------------------------------------
# Muon optimizer

class Muon(torch.optim.Optimizer):
    """
    Muon - MomentUm Orthogonalized by Newton-schulz

    https://kellerjordan.github.io/posts/muon/

    Muon internally runs standard SGD-momentum, and then performs an orthogonalization post-
    processing step, in which each 2D parameter's update is replaced with the nearest orthogonal
    matrix. To efficiently orthogonalize each update, we use a Newton-Schulz iteration, which has
    the advantage that it can be stably run in bfloat16 on the GPU.

    Warning: This optimizer should not be used for the embedding layer, the final fully connected layer,
    or any {0,1}-D parameters; those should all be optimized by a standard method (e.g., AdamW).
    """
    def __init__(self, params, lr=0.02, weight_decay=0.01, momentum=0.95):
        defaults = dict(lr=lr, weight_decay=weight_decay, momentum=momentum)
        params = list(params)
        sizes = {p.shape for p in params}
        # create one buffer per unique parameter-size
        param_groups = []
        for size in sizes:
            group_params = [p for p in params if p.shape == size]
            param_groups.append(dict(params=group_params))
        super().__init__(param_groups, defaults)

    @torch.no_grad()
    def step(self):
        # Efficient systems-wise implementation of step developed by @YouJiacheng,
        # @KonstantinWilleke, @alexrgilbert, @adricarda, @tuttyfrutyee, @vdlad,
        # @ryanyang0, and @vagrawal.
        rank = dist.get_rank()
        world_size = dist.get_world_size()
        reduce_scatter_futures: list[torch.Future] = []
        all_gather_futures: list[torch.Future] = []
        for group in self.param_groups:
            params: list[Tensor] = group["params"]
            grad = torch.empty_like(params[-1])
            grad_pad = [param.grad for param in params] + [torch.zeros_like(params[-1])] * world_size
            for base_i in range(0, len(params), world_size):
                if base_i + rank < len(params):
                    grad = params[base_i + rank].grad
                # This gives strange dynamo warnings
                reduce_scatter_futures.append(dist.reduce_scatter(grad, grad_pad[base_i:base_i + world_size], op=dist.ReduceOp.AVG, async_op=True).get_future())

        idx = 0
        for group in self.param_groups:
            params: list[Tensor] = group["params"]
            params_pad = params + [torch.empty_like(params[-1])] * world_size
            momentum = group["momentum"]
            for base_i in range(0, len(params), world_size):
                reduce_scatter_futures[idx].wait()
                if base_i + rank < len(params):
                    p = params[base_i + rank]
                    grad = p.grad
                    eff_lr = group["lr"] * max(1, p.size(-2) / p.size(-1)) ** 0.5 * getattr(p, "lr_mul", 1.0)
                    eff_weight_decay = group["lr"] * group["weight_decay"] * getattr(p, "wd_mul", 1.0)
                    state = self.state[p]
                    if len(state) == 0:
                        state["momentum_buffer"] = torch.zeros_like(grad)
                    momentum_buffer = state["momentum_buffer"]
                    p.mul_(1 - eff_weight_decay)
                    momentum_buffer.lerp_(grad, 1 - momentum)
                    grad = grad.lerp_(momentum_buffer, momentum)
                    v = newton_schulz_triton(grad)
                    p.add_(other=v, alpha=-eff_lr)
                idx += 1
                all_gather_futures.append(dist.all_gather(params_pad[base_i:base_i + world_size], params_pad[base_i + rank], async_op=True).get_future())
        torch.futures.collect_all(all_gather_futures).wait()

class DistAdam(torch.optim.Optimizer):
    def __init__(self, params, lr: float = 1e-3, betas: tuple[float, float] = (0.9, 0.999), eps: float = 1e-8, weight_decay: float = 0.01):
        defaults = dict(lr=lr, betas=betas, eps=eps, weight_decay=weight_decay)
        params = list(params)
        sizes = {p.shape for p in params}
        # create one buffer per unique parameter-size
        param_groups = []
        for size in sizes:
            group_params = [p for p in params if p.shape == size]
            param_groups.append(dict(params=group_params))
        super().__init__(param_groups, defaults)
        # DistributedAdam implementation by @vagrawal

    @torch.compile
    @torch.no_grad()
    def step(self):
        rank = dist.get_rank()
        world_size = dist.get_world_size()
        reduce_scatter_futures: list[torch.Future] = []
        all_gather_futures: list[torch.Future] = []
        grad_slices = []
        for group in self.param_groups:
            params: list[Tensor] = group["params"]
            for base_i in range(len(params)):
                grad = params[base_i].grad
                rank_size = grad.shape[0] // world_size
                grad_slice = torch.empty_like(grad[:rank_size])
                reduce_scatter_futures.append(dist.reduce_scatter_tensor(grad_slice, grad, op=dist.ReduceOp.AVG, async_op=True).get_future())
                grad_slices.append(grad_slice)

        idx = 0
        for group in self.param_groups:
            beta1, beta2 = group['betas']
            eps = group['eps']
            wd = group['weight_decay']
            params = group['params']
            for base in range(len(params)):
                reduce_scatter_futures[idx].wait()
                p = params[base]
                rank_size = p.shape[0] // world_size
                p_slice = p[rank * rank_size:(rank + 1) * rank_size]
                lr = group['lr'] * getattr(p, "lr_mul", 1.0)
                state = self.state[p]
                g_slice = grad_slices[idx]
                # State init
                if not state:
                    state['step'] = torch.tensor(0, dtype=torch.int64, device=p.device)
                    state['exp_avg'] = torch.zeros_like(p_slice)
                    state['exp_avg_sq'] = torch.zeros_like(p_slice)
                exp_avg = state['exp_avg']
                exp_avg_sq = state['exp_avg_sq']
                state['step'] += 1
                t = state['step']
                # weight decay
                if wd != 0:
                    eff_weight_decay = lr * wd * getattr(p, "wd_mul", 1.0)
                    p_slice.mul_(1 - eff_weight_decay)
                # update running averages
                exp_avg.mul_(beta1).add_(g_slice, alpha=1 - beta1)
                exp_avg_sq.mul_(beta2).addcmul_(g_slice, g_slice, value=1 - beta2)
                # bias corrections
                bias1 = 1 - beta1 ** t
                bias2 = 1 - beta2 ** t
                # compute step
                denom = exp_avg_sq.sqrt().add_(eps)
                step_size = lr * (torch.sqrt(bias2) / bias1)
                update = exp_avg.div(denom).mul_(step_size)
                p_slice.add_(other=update, alpha=-1.0)
                idx += 1
                all_gather_futures.append(dist.all_gather_into_tensor(p, p_slice, async_op=True).get_future())
        torch.futures.collect_all(all_gather_futures).wait()

# -----------------------------------------------------------------------------
# PyTorch nn.Module definitions for the model

def norm(x: Tensor):
    return F.rms_norm(x, (x.size(-1),))

class CastedLinear(nn.Linear):
    def __init__(self, in_features: int, out_features: int, use_fp8=False, x_s=1.0, w_s=1.0, grad_s=1.0):
        super().__init__(in_features, out_features, bias=False)
        self.use_fp8 = use_fp8
        self.x_s = x_s
        self.w_s = w_s
        self.grad_s = grad_s

    def reset_parameters(self) -> None:
        std = 0.5 * (self.in_features ** -0.5) # 0.5 is a bit better than the default 1/sqrt(3)
        bound = (3 ** 0.5) * std
        with torch.no_grad():
            self.weight.uniform_(-bound, bound)

    def forward(self, x: Tensor):
        if self.use_fp8 and self.training:
            _x = x.flatten(0, -2)
            out: Tensor = torch.ops.nanogpt.mm(_x, self.weight, x_s=self.x_s, w_s=self.w_s, grad_s=self.grad_s)[0]
            return out.reshape(*x.shape[:-1], -1)
        else:
            return F.linear(x, self.weight.type_as(x))

class Rotary(nn.Module):
    def __init__(self, dim: int, max_seq_len: int):
        super().__init__()
        # half-truncate RoPE by @YouJiacheng (w/ base freq tuning)
        angular_freq = (1 / 1024) ** torch.linspace(0, 1, steps=dim//4, dtype=torch.float32)
        angular_freq = torch.cat([angular_freq, angular_freq.new_zeros(dim//4)])
        t = torch.arange(max_seq_len, dtype=torch.float32)
        theta = torch.einsum("i,j -> ij", t, angular_freq)
        self.cos = nn.Buffer(theta.cos(), persistent=False)
        self.sin = nn.Buffer(theta.sin(), persistent=False)

    def forward(self, x_BTHD: Tensor):
        assert self.cos.size(0) >= x_BTHD.size(-3)
        cos, sin = self.cos[None, :x_BTHD.size(-3), None, :], self.sin[None, :x_BTHD.size(-3), None, :]
        x1, x2 = x_BTHD.to(dtype=torch.float32).chunk(2, dim=-1)
        y1 = x1 * cos + x2 * sin
        y2 = x1 * (-sin) + x2 * cos
        return torch.cat((y1, y2), 3).type_as(x_BTHD)

class CausalSelfAttention(nn.Module):
    def __init__(self, dim: int, num_heads: int, max_seq_len: int, head_dim=128):
        super().__init__()
        self.num_heads = num_heads
        self.head_dim = head_dim
        hdim = num_heads * head_dim
        assert hdim == dim, "num_heads * head_dim must equal model_dim"
        std = 0.5 * (dim ** -0.5)
        bound = (3 ** 0.5) * std # improved init scale by @YouJiacheng
        # merged QKV weights: suggested by many, implemented by @fernbear.bsky.social, and further improved by @YouJiacheng
        # https://x.com/hi_tysam/status/1879699187107033311
        self.qkvo_w = nn.Parameter(torch.empty(4, hdim, dim))
        with torch.no_grad():
            self.qkvo_w[:3].uniform_(-bound, bound) # init QKV weights
            self.qkvo_w[3].zero_() # init output weights to zero
        self.rotary = Rotary(head_dim, max_seq_len)
        # scale the attention logits by given constant, instead of the default head_dim**-0.5, by @leloykun
        # inspired by learnable scalars used by @brendanh0gan https://x.com/hi_tysam/status/1879693583898591283
        self.attn_scale = 0.12

        # sparse gated attention to enable context based no-op by @classiclarryd
        self.attn_gate_dim = 12
        self.attn_gate = CastedLinear(self.attn_gate_dim, num_heads)
        self.attn_gate.weight.detach().zero_()

    def forward(self, x: Tensor, ve: Tensor | None, lambdas: Tensor, bm_size: int):
        B, T = x.size(0), x.size(1) # batch size, sequence length

        q, k, v = F.linear(x, self.qkvo_w[:3].flatten(end_dim=1).type_as(x)).view(B, T, 3 * self.num_heads, self.head_dim).chunk(3, dim=-2)
        q, k = norm(q), norm(k) # QK norm @Grad62304977
        q, k = self.rotary(q), self.rotary(k)
        if ve is not None:
            v = lambdas[0] * v + lambdas[1] * ve.view_as(v) # @KoszarskyB & @Grad62304977
        else: # skip mid-layers token value embeddings by @YouJiacheng
            v = lambdas[0] * v

        y = flash_attn_func(q, k, v, softmax_scale=self.attn_scale, window_size=(bm_size, 0)) # use flash_attn over flex_attn @varunneal
        y = y.view(B, T, self.num_heads, self.head_dim)
        y = y * torch.sigmoid(self.attn_gate(x[..., :self.attn_gate_dim])).view(B, T, self.num_heads, 1)
        y = y.contiguous().view(B, T, self.num_heads * self.head_dim) # re-assemble all head outputs side by side
        y = F.linear(y, self.qkvo_w[3].type_as(y))
        return y

class MLP(nn.Module):
    def __init__(self, dim: int):
        super().__init__()
        hdim = 4 * dim
        # make both matrices have the same shape because optimizer sorts params by shape
        # 2 matrices x 12 layers = 24 total, which is divisible by 8 GPU world size
        self.c_fc = nn.Parameter(torch.empty(dim, hdim))
        self.c_proj = nn.Parameter(torch.empty(dim, hdim))
        std = 0.5 * (dim ** -0.5)
        bound = (3 ** 0.5) * std # improved init scale by @YouJiacheng
        with torch.no_grad():
            self.c_fc.uniform_(-bound, bound)
            self.c_proj.zero_() # zero init suggested by @Grad62304977

    def forward(self, x: Tensor):
        x = F.linear(x, self.c_fc.T.type_as(x))
        x = F.relu(x).square() # https://arxiv.org/abs/2109.08668v2; ~1-2% better than GELU; suggested by @SKYLINEZ007 and @Grad62304977
        x = F.linear(x, self.c_proj.type_as(x))
        return x

class Block(nn.Module):
    def __init__(self, dim: int, num_heads: int, max_seq_len: int, layer_idx: int):
        super().__init__()
        # skip attention of blocks.7 (the 8th layer) by @YouJiacheng
        self.attn = CausalSelfAttention(dim, num_heads, max_seq_len) if layer_idx != 7 else None
        self.mlp = MLP(dim)

    def forward(self, x: Tensor, ve: Tensor | None, x0: Tensor, lambdas: Tensor, sa_lambdas: Tensor, bm_size: int):
        x = lambdas[0] * x + lambdas[1] * x0
        if self.attn is not None:
            x = x + self.attn(norm(x), ve, sa_lambdas, bm_size)
        x = x + self.mlp(norm(x))
        return x

# -----------------------------------------------------------------------------
# The main model

def next_multiple_of_n(v: float | int, *, n: int):
    return next(x for x in range(n, int(v) + 1 + n, n) if x >= v)

class GPT(nn.Module):
    def __init__(self, vocab_size: int, num_layers: int, num_heads: int, model_dim: int, max_seq_len: int):
        super().__init__()
        vocab_size = next_multiple_of_n(vocab_size, n=128)
        self.embed = nn.Embedding(vocab_size, model_dim)
        # token value embeddings by @KoszarskyB - inspired by @Grad62304977's value residual implementation following https://arxiv.org/abs/2410.17897
        # value embedding code simplification inspired by @ragulpr https://github.com/KellerJordan/modded-nanogpt/pull/78
        self.value_embeds = nn.ModuleList([nn.Embedding(vocab_size, model_dim) for _ in range(3)])
        self.blocks = nn.ModuleList([Block(model_dim, num_heads, max_seq_len, i) for i in range(num_layers)])
        # there are only 50257 unique GPT-2 tokens; we extend to nearest multiple of 128 for efficiency.
        # suggested to me by @Grad62304977. this originates from Karpathy's experiments.
        use_fp8 = not os.environ.get("DISABLE_FP8", False)
        self.lm_head = CastedLinear(model_dim, vocab_size, use_fp8=use_fp8, x_s=(model_dim**0.5)/448, w_s=2**-9, grad_s=1/448)
        self.lm_head.weight.detach().zero_() # @Grad62304977
        # Add learnable skip connection weights for decoder layers
        assert num_layers % 2 == 0
        pad = (-num_layers * 5) % dist.get_world_size()
        self.scalars = nn.Parameter(torch.cat([
            torch.ones(num_layers), # skip_weights
            *[torch.tensor([1.0, 0.0]) for _ in range(num_layers)], # block lambdas
            *[torch.tensor([0.5, 0.5]) for _ in range(num_layers)], # SA lambdas
            torch.ones(pad),
        ]))
        # set learning rates
        for param in self.embed.parameters():
            param.lr_mul = 75.
        for param in self.value_embeds.parameters():
            param.lr_mul = 75.
        self.lm_head.weight.lr_mul = 1.0
        self.scalars.lr_mul = 5.0


    def forward(self, input_seq: Tensor, target_seq: Tensor, ws_long: int, ws_short: int):
        assert input_seq.ndim == 2

        ve = [value_embed(input_seq) for value_embed in self.value_embeds]
        # 012 ... 012 structure on token value embeddings by @YouJiacheng, improved on @leloykun's U-net structure
        ve = [ve[0], ve[1], ve[2]] + [None] * (len(self.blocks) - 6) + [ve[0], ve[1], ve[2]]
        assert len(ve) == len(self.blocks)

        long_bm, short_bm = ws_long * args.bandwidth, ws_short * args.bandwidth
        bm_sizes = [long_bm, short_bm, short_bm, short_bm, long_bm, short_bm, short_bm, long_bm, short_bm, short_bm, short_bm, long_bm]
        assert len(bm_sizes) == len(self.blocks)

        x = x0 = norm(self.embed(input_seq)) # use of norm here by @Grad62304977

        # U-net design by @brendanh0gan
        skip_connections = []
        skip_weights = self.scalars[:(len(self.blocks) // 2)]
        lambdas = self.scalars[1 * len(self.blocks): 3 * len(self.blocks)].view(-1, 2)
        sa_lambdas = self.scalars[3 * len(self.blocks): 5 * len(self.blocks)].view(-1, 2)

        n = len(self.blocks) // 2

        for i in range(len(self.blocks)):
            if i >= n:
                x = x + skip_weights[i - n] * skip_connections.pop()
            x = self.blocks[i](x, ve[i], x0, lambdas[i], sa_lambdas[i], bm_sizes[i])
            if i < n:
                skip_connections.append(x)

        x = norm(x)
        logits = self.lm_head(x).float()
        # @Grad62304977 added tanh softcapping following Gemma 2 paper, @KoszarskyB reduced it from 30 to 15, @YouJiacheng shifted it by +15 (2*sigmoid(2*x)=tanh(x)+1)
        logits = 30 * torch.sigmoid(logits / 7.5)
        loss = F.cross_entropy(logits.view(-1, logits.size(-1)), target_seq.view(-1),
                               reduction="sum" if self.training else "mean")
        return loss

# -----------------------------------------------------------------------------
# Distributed data loader

def _load_data_shard(file: Path):
    header = torch.from_file(str(file), False, 256, dtype=torch.int32) # header is 256 int32
    assert header[0] == 20240520, "magic number mismatch in the data .bin file"
    assert header[1] == 1, "unsupported version"
    num_tokens = int(header[2]) # number of tokens (claimed)
    with file.open("rb", buffering=0) as f:
        tokens = torch.empty(num_tokens, dtype=torch.uint16, pin_memory=True) # avoid pin_memory copy by @YouJiacheng
        f.seek(256 * 4)
        nbytes = f.readinto(tokens.numpy()) # avoid bytes->array copy by @YouJiacheng
        assert nbytes == 2 * num_tokens, "number of tokens read does not match header"
    return tokens

class EOSBatchFinder:
    # Helper for getting sequences that start at the beginning of documents by @varunneal based on work by @classiclarryd
    def __init__(self, tokens: Tensor, world_size: int = 1, eos_id: int = 50256):
        # Precompute EOS positions once per shard
        self.eos_idx = (tokens == eos_id).nonzero(as_tuple=True)[0].to(torch.int64).cpu().numpy()
        self.i = 0      # pointer into eos_idx (start EOS for next step)
        self.pos = 0    # logical stream position within this shard
        self.world_size = world_size
    def seek(self, pos: int):
        # Set pointer to the first EOS >= pos
        self.i = np.searchsorted(self.eos_idx, pos)
        if self.i >= len(self.eos_idx):
            raise StopIteration("Seek past last EOS.")
        self.pos = pos
    def next_batch(self, batch_size_local: int, seq_len: int):
        n = len(self.eos_idx)
        if self.i >= n:
            raise StopIteration("No more EOS in this shard.")
        starts = [[] for _ in range(self.world_size)]
        idx = self.i
        cur = self.eos_idx[idx]  # EOS that ends the "previous" document; next doc starts at cur+1
        for r in range(self.world_size):
            for _ in range(batch_size_local):
                start = cur + 1
                target = start + seq_len                      # need seq_len tokens before next EOS
                j = np.searchsorted(self.eos_idx, target)
                if j >= n:
                    raise StopIteration("Insufficient EOS ahead; hit tail of shard.")
                starts[r].append(start)
                idx = j
                cur = self.eos_idx[idx]                  # next seq must also start at a new doc
        advance = self.eos_idx[idx] - self.pos           # move stream to the last end
        self.pos += advance
        self.i = idx
        return starts, advance


def distributed_data_generator(filename_pattern: str, batch_size: int, seq_len: int, align_to_bos: bool = True):
    # align_to_bos: each sequence begins with Beginning of Sequence token and sequences don't overlap
    rank = dist.get_rank() if dist.is_initialized() else 0
    world_size = dist.get_world_size() if dist.is_initialized() else 1
    assert batch_size % world_size == 0, "Batch size must be divisible by world size"

    files = [Path(file) for file in sorted(glob.glob(filename_pattern))]
    if not files:
        raise FileNotFoundError(f"No files found for pattern: {filename_pattern}")

    file_iter = iter(files)  # Use itertools.cycle(files) for multi-epoch training
    tokens, pos = _load_data_shard(next(file_iter)), 0

    finder = EOSBatchFinder(tokens, world_size=world_size) if align_to_bos else None
    if align_to_bos: finder.seek(pos)

    while True:
        batch_size_local = batch_size // world_size
        num_tokens_global = batch_size * seq_len

        if not align_to_bos and pos + num_tokens_global + 1 >= len(tokens):
            tokens, pos = _load_data_shard(next(file_iter)), 0

        if align_to_bos:
            try:
                batch_starts, batch_span = finder.next_batch(batch_size_local, seq_len)
                start_idxs = batch_starts[rank]
            except StopIteration:
                # This shard is exhausted, load the next one in the next loop iteration.
                tokens, pos = _load_data_shard(next(file_iter)), 0
                finder = EOSBatchFinder(tokens, world_size=world_size)
                continue

            bufs = [tokens[s: s + seq_len + 1] for s in start_idxs]
            buf = torch.stack(bufs, dim=0)
            _inputs = buf[:, :-1]
            _targets = buf[:, 1:]
        else:
            batch_span = num_tokens_global
            start_pos_local = pos + rank * (batch_size_local * seq_len)
            end_pos_local = start_pos_local + (batch_size_local * seq_len)

            buf = tokens[start_pos_local: end_pos_local + 1]

            _inputs = buf[:-1].view(batch_size_local, seq_len)
            _targets = buf[1:].view(batch_size_local, seq_len)

        new_params = yield (
            _inputs.to(device="cuda", dtype=torch.int32, non_blocking=True),
            _targets.to(device="cuda", dtype=torch.int64, non_blocking=True)
        )

        pos += batch_span

        if new_params is not None:
            # makes it possible for generator to recieve new (batch_size, seq_len) via .send()
            new_batch_size, new_seq_len = new_params
            assert new_batch_size % world_size == 0, "New batch size must be divisible by world size"
            batch_size = new_batch_size
            seq_len = new_seq_len


# -----------------------------------------------------------------------------
# int main

@dataclass
class Hyperparameters:
    # data
    train_files: str = "data/fineweb10B/fineweb_train_*.bin" # input .bin to train on
    val_files: str = "data/fineweb10B/fineweb_val_*.bin" # input .bin to eval validation loss on
    val_tokens: int = 10485760 # how many tokens of validation data? it's important to keep this fixed for consistent comparisons
    train_seq_len: int = 1024 * 2
    train_batch_size: int = 24 * 8
    val_seq_len: int = 4 * 64 * 1024 # Validation will be done with batch size = world_size.
    # optimization
    num_iterations: int = 1695 # number of iterations to run
    cooldown_frac: int = 0.45 # fraction of training spent cooling down the learning rate
    # evaluation and logging
    run_id: str = str(uuid.uuid4())
    val_loss_every: int = 125 # every how many steps to evaluate val loss? 0 for only at the end
    save_checkpoint: bool = False
    # attention masking
    bandwidth: int = 128
    ws_schedule: tuple = (3, 7, 11)

args = Hyperparameters()

data_path = os.environ.get("DATA_PATH", ".")
args.train_files = os.path.join(data_path, args.train_files)
args.val_files = os.path.join(data_path, args.val_files)

# torchrun sets these env variables
rank = int(os.environ["RANK"])
world_size = int(os.environ["WORLD_SIZE"])
assert 8 % world_size == 0, "world_size must be a divisor of 8"
grad_accum_steps = 8 // world_size
assert torch.cuda.is_available()
device = torch.device("cuda", int(os.environ["LOCAL_RANK"]))
torch.cuda.set_device(device)
dist.init_process_group(backend="nccl", device_id=device)
dist.barrier()
master_process = (rank == 0) # this process will do logging, checkpointing etc.

# begin logging
logfile = None
if master_process:
    run_id = args.run_id
    os.makedirs("logs", exist_ok=True)
    logfile = f"logs/{run_id}.txt"
    print(logfile)
def print0(s, console=False):
    if master_process:
        with open(logfile, "a") as f:
            if console:
                print(s)
            print(s, file=f)

# begin by printing this file (the Python code)
print0(code)
print0("="*100)
# log information about the hardware/software environment this is running on
print0(f"Running Python {sys.version}")
print0(f"Running PyTorch {torch.version.__version__} compiled for CUDA {torch.version.cuda}")
print0(f"Running Triton version {triton.__version__}")

def nvidia_smi():
    import subprocess  # avoid top level import
    return subprocess.run(["nvidia-smi"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True).stdout
print0(nvidia_smi())
print0("="*100)

model: nn.Module = GPT(
    vocab_size=50257,
    num_layers=12,
    num_heads=6,
    model_dim=768,
    max_seq_len=max(args.train_seq_len, args.val_seq_len)
).cuda()
for m in model.modules():
    if isinstance(m, nn.Embedding):
        m.bfloat16()
for param in model.parameters():
    dist.broadcast(param.detach(), 0)

# collect the parameters to optimize
hidden_matrix_params = [p for n, p in model.blocks.named_parameters() if p.ndim >= 2 and "embed" not in n]
embed_params = [p for n, p in model.named_parameters() if "embed" in n]
scalar_params = [p for p in model.parameters() if p.ndim < 2]
head_params = [model.lm_head.weight]

# init the optimizer(s)
# small adam epsilon by @YouJiacheng. this is an alternate method of fixing the world_size dependence
# discovered by @fernbear.bsky.social https://x.com/hi_tysam/status/1879692937589875094
optimizer1 = DistAdam(scalar_params + head_params + embed_params, lr=0.008, betas=(0.8, 0.95), eps=1e-10, weight_decay=0.0)
optimizer2 = Muon(hidden_matrix_params, lr=0.05, momentum=0.95, weight_decay=0.0)
optimizers = [optimizer1, optimizer2]
for opt in optimizers:
    for group in opt.param_groups:
        group["initial_lr"] = group["lr"]

# learning rate schedule: stable then decay
def get_lr_and_ws(step: int):
    x = step / (1 + args.num_iterations) # progress in training
    assert 0 <= x < 1
    lr = 1.0
    if x >= 1 - args.cooldown_frac:
        w = (1 - x) / args.cooldown_frac
        lr = w * 1.0 + (1 - w) * 0.1
    ws_idx = int(len(args.ws_schedule) * x)
    return lr, args.ws_schedule[ws_idx]

model: nn.Module = torch.compile(model, dynamic=False, fullgraph=True)

########################################
#            Warmup kernels            #
########################################

# Warmup the training kernels, then re-initialize the state so we aren't cheating
warmup_steps = 60
initial_state = dict(model=copy.deepcopy(model.state_dict()),
                     optimizers=[copy.deepcopy(opt.state_dict()) for opt in optimizers]) # save the initial state
train_loader = distributed_data_generator(args.train_files, args.train_batch_size, args.train_seq_len)
for step in range(warmup_steps):
    inputs, targets = next(train_loader)
    ws = args.ws_schedule[step % len(args.ws_schedule)]  # each window size is a new graph, need to warm up eachZ
    model(inputs, targets, ws, ws // 2).backward()
    for opt in optimizers:
        opt.step()
    model.zero_grad(set_to_none=True)
model.load_state_dict(initial_state["model"])
for opt, opt_state in zip(optimizers, initial_state["optimizers"]):
    opt.load_state_dict(opt_state)
del train_loader, initial_state

########################################
#        Training and validation       #
########################################

train_loader = distributed_data_generator(args.train_files, args.train_batch_size, args.train_seq_len)
training_time_ms = 0
# start the clock
torch.cuda.synchronize()
t0 = time.perf_counter()
# begin training
train_steps = args.num_iterations
for step in range(train_steps + 1):
    last_step = (step == train_steps)
    lr, ws = get_lr_and_ws(step)

    # --------------- VALIDATION SECTION -----------------
    if last_step or (args.val_loss_every > 0 and step % args.val_loss_every == 0):
        # stop the clock
        torch.cuda.synchronize()
        training_time_ms += 1000 * (time.perf_counter() - t0)
        model.eval()
        assert args.val_tokens % (world_size * args.val_seq_len) == 0
        val_steps = args.val_tokens // (world_size * args.val_seq_len)
        val_loader = distributed_data_generator(args.val_files, world_size, args.val_seq_len, align_to_bos=False)
        val_loss = 0
        with torch.no_grad():
            for _ in range(val_steps):
                inputs, targets = next(val_loader)
                val_loss += model(inputs, targets, ws, ws // 2)
        val_loss /= val_steps
        del val_loader
        dist.all_reduce(val_loss, op=dist.ReduceOp.AVG)
        print0(f"step:{step}/{train_steps} val_loss:{val_loss:.4f} train_time:{training_time_ms:.0f}ms step_avg:{training_time_ms/max(step, 1):.2f}ms", console=True)
        model.train()
        # start the clock again
        torch.cuda.synchronize()
        t0 = time.perf_counter()

    if last_step:
        if master_process and args.save_checkpoint:
            log = dict(step=step, code=code, model=model.state_dict(), optimizers=[opt.state_dict() for opt in optimizers])
            os.makedirs(f"logs/{run_id}", exist_ok=True)
            torch.save(log, f"logs/{run_id}/state_step{step:06d}.pt")
        # the last step only has the validation loop, so break to avoid training
        break

    # --------------- TRAINING SECTION -----------------
    for _ in range(grad_accum_steps):
        inputs, targets = next(train_loader)
        model(inputs, targets, ws, ws // 2).backward()
    # set optimization hyperparameters
    for opt in optimizers:
        for group in opt.param_groups:
            group["lr"] = group["initial_lr"] * lr
    for group in optimizer2.param_groups:
        frac = min(step / 300, 1) # momentum warmup for muon
        group["momentum"] = (1 - frac) * 0.85 + frac * 0.95
    # step the optimizers
    for opt in optimizers:
        opt.step()
    # null the gradients
    model.zero_grad(set_to_none=True)
    # logging
    approx_training_time_ms = training_time_ms + 1000 * (time.perf_counter() - t0)
    print0(f"step:{step+1}/{train_steps} train_time:{approx_training_time_ms:.0f}ms step_avg:{approx_training_time_ms/(step + 1):.2f}ms", console=True)

print0(f"peak memory allocated: {torch.cuda.max_memory_allocated() // 1024 // 1024} MiB "
       f"reserved: {torch.cuda.max_memory_reserved() // 1024 // 1024} MiB", console=True)
dist.destroy_process_group()
====================================================================================================
Running Python 3.10.12 (main, May 27 2025, 17:12:29) [GCC 11.4.0]
Running PyTorch 2.9.0.dev20250718+cu126 compiled for CUDA 12.6
Running Triton version 3.4.0
Wed Aug 27 03:53:12 2025       
+---------------------------------------------------------------------------------------+
| NVIDIA-SMI 535.183.06             Driver Version: 535.183.06   CUDA Version: 12.6     |
|-----------------------------------------+----------------------+----------------------+
| GPU  Name                 Persistence-M | Bus-Id        Disp.A | Volatile Uncorr. ECC |
| Fan  Temp   Perf          Pwr:Usage/Cap |         Memory-Usage | GPU-Util  Compute M. |
|                                         |                      |               MIG M. |
|=========================================+======================+======================|
|   0  NVIDIA H100 80GB HBM3          On  | 00000000:00:0B.0 Off |                  Off |
| N/A   30C    P0             114W / 700W |   5858MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   1  NVIDIA H100 80GB HBM3          On  | 00000000:00:0C.0 Off |                  Off |
| N/A   32C    P0             113W / 700W |   1519MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   2  NVIDIA H100 80GB HBM3          On  | 00000000:00:0D.0 Off |                  Off |
| N/A   33C    P0             114W / 700W |   1519MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   3  NVIDIA H100 80GB HBM3          On  | 00000000:00:0E.0 Off |                  Off |
| N/A   30C    P0             113W / 700W |   1519MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   4  NVIDIA H100 80GB HBM3          On  | 00000000:00:0F.0 Off |                  Off |
| N/A   30C    P0             111W / 700W |   1519MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   5  NVIDIA H100 80GB HBM3          On  | 00000000:00:10.0 Off |                  Off |
| N/A   34C    P0             116W / 700W |   1519MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   6  NVIDIA H100 80GB HBM3          On  | 00000000:00:11.0 Off |                  Off |
| N/A   32C    P0             111W / 700W |   1519MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
|   7  NVIDIA H100 80GB HBM3          On  | 00000000:00:12.0 Off |                  Off |
| N/A   31C    P0             114W / 700W |   1519MiB / 81559MiB |      0%      Default |
|                                         |                      |             Disabled |
+-----------------------------------------+----------------------+----------------------+
                                                                                         
+---------------------------------------------------------------------------------------+
| Processes:                                                                            |
|  GPU   GI   CI        PID   Type   Process name                            GPU Memory |
|        ID   ID                                                             Usage      |
|=======================================================================================|
+---------------------------------------------------------------------------------------+

====================================================================================================
step:0/1695 val_loss:10.8258 train_time:0ms step_avg:0.03ms
step:1/1695 train_time:508ms step_avg:507.99ms
step:2/1695 train_time:531ms step_avg:265.69ms
step:3/1695 train_time:603ms step_avg:200.91ms
step:4/1695 train_time:695ms step_avg:173.68ms
step:5/1695 train_time:787ms step_avg:157.47ms
step:6/1695 train_time:881ms step_avg:146.76ms
step:7/1695 train_time:974ms step_avg:139.13ms
step:8/1695 train_time:1067ms step_avg:133.43ms
step:9/1695 train_time:1161ms step_avg:128.95ms
step:10/1695 train_time:1253ms step_avg:125.34ms
step:11/1695 train_time:1347ms step_avg:122.48ms
step:12/1695 train_time:1445ms step_avg:120.43ms
step:13/1695 train_time:1543ms step_avg:118.70ms
step:14/1695 train_time:1638ms step_avg:117.04ms
step:15/1695 train_time:1732ms step_avg:115.49ms
step:16/1695 train_time:1827ms step_avg:114.19ms
step:17/1695 train_time:1921ms step_avg:113.01ms
step:18/1695 train_time:2015ms step_avg:111.93ms
step:19/1695 train_time:2108ms step_avg:110.95ms
step:20/1695 train_time:2202ms step_avg:110.08ms
step:21/1695 train_time:2295ms step_avg:109.29ms
step:22/1695 train_time:2390ms step_avg:108.63ms
step:23/1695 train_time:2486ms step_avg:108.07ms
step:24/1695 train_time:2583ms step_avg:107.61ms
step:25/1695 train_time:2678ms step_avg:107.10ms
step:26/1695 train_time:2771ms step_avg:106.59ms
step:27/1695 train_time:2867ms step_avg:106.18ms
step:28/1695 train_time:2962ms step_avg:105.78ms
step:29/1695 train_time:3055ms step_avg:105.34ms
step:30/1695 train_time:3149ms step_avg:104.96ms
step:31/1695 train_time:3243ms step_avg:104.60ms
step:32/1695 train_time:3336ms step_avg:104.26ms
step:33/1695 train_time:3430ms step_avg:103.94ms
step:34/1695 train_time:3526ms step_avg:103.70ms
step:35/1695 train_time:3622ms step_avg:103.48ms
step:36/1695 train_time:3717ms step_avg:103.24ms
step:37/1695 train_time:3811ms step_avg:102.99ms
step:38/1695 train_time:3906ms step_avg:102.79ms
step:39/1695 train_time:4001ms step_avg:102.58ms
step:40/1695 train_time:4094ms step_avg:102.36ms
step:41/1695 train_time:4188ms step_avg:102.14ms
step:42/1695 train_time:4282ms step_avg:101.96ms
step:43/1695 train_time:4376ms step_avg:101.76ms
step:44/1695 train_time:4470ms step_avg:101.58ms
step:45/1695 train_time:4565ms step_avg:101.45ms
step:46/1695 train_time:4661ms step_avg:101.32ms
step:47/1695 train_time:4754ms step_avg:101.15ms
step:48/1695 train_time:4849ms step_avg:101.01ms
step:49/1695 train_time:4944ms step_avg:100.89ms
step:50/1695 train_time:5039ms step_avg:100.77ms
step:51/1695 train_time:5132ms step_avg:100.63ms
step:52/1695 train_time:5227ms step_avg:100.51ms
step:53/1695 train_time:5322ms step_avg:100.41ms
step:54/1695 train_time:5416ms step_avg:100.29ms
step:55/1695 train_time:5510ms step_avg:100.18ms
step:56/1695 train_time:5606ms step_avg:100.10ms
step:57/1695 train_time:5701ms step_avg:100.02ms
step:58/1695 train_time:5795ms step_avg:99.91ms
step:59/1695 train_time:5889ms step_avg:99.81ms
step:60/1695 train_time:5984ms step_avg:99.73ms
step:61/1695 train_time:6077ms step_avg:99.63ms
step:62/1695 train_time:6171ms step_avg:99.54ms
step:63/1695 train_time:6267ms step_avg:99.47ms
step:64/1695 train_time:6362ms step_avg:99.40ms
step:65/1695 train_time:6457ms step_avg:99.33ms
step:66/1695 train_time:6551ms step_avg:99.26ms
step:67/1695 train_time:6647ms step_avg:99.21ms
step:68/1695 train_time:6743ms step_avg:99.15ms
step:69/1695 train_time:6837ms step_avg:99.08ms
step:70/1695 train_time:6930ms step_avg:99.00ms
step:71/1695 train_time:7025ms step_avg:98.95ms
step:72/1695 train_time:7119ms step_avg:98.88ms
step:73/1695 train_time:7214ms step_avg:98.82ms
step:74/1695 train_time:7308ms step_avg:98.75ms
step:75/1695 train_time:7403ms step_avg:98.70ms
step:76/1695 train_time:7497ms step_avg:98.64ms
step:77/1695 train_time:7591ms step_avg:98.59ms
step:78/1695 train_time:7685ms step_avg:98.53ms
step:79/1695 train_time:7781ms step_avg:98.50ms
step:80/1695 train_time:7876ms step_avg:98.45ms
step:81/1695 train_time:7969ms step_avg:98.39ms
step:82/1695 train_time:8065ms step_avg:98.35ms
step:83/1695 train_time:8160ms step_avg:98.31ms
step:84/1695 train_time:8253ms step_avg:98.25ms
step:85/1695 train_time:8347ms step_avg:98.21ms
step:86/1695 train_time:8442ms step_avg:98.16ms
step:87/1695 train_time:8536ms step_avg:98.11ms
step:88/1695 train_time:8630ms step_avg:98.07ms
step:89/1695 train_time:8725ms step_avg:98.03ms
step:90/1695 train_time:8819ms step_avg:97.99ms
step:91/1695 train_time:8913ms step_avg:97.95ms
step:92/1695 train_time:9008ms step_avg:97.91ms
step:93/1695 train_time:9102ms step_avg:97.87ms
step:94/1695 train_time:9196ms step_avg:97.83ms
step:95/1695 train_time:9290ms step_avg:97.79ms
step:96/1695 train_time:9385ms step_avg:97.76ms
step:97/1695 train_time:9480ms step_avg:97.73ms
step:98/1695 train_time:9574ms step_avg:97.69ms
step:99/1695 train_time:9669ms step_avg:97.66ms
step:100/1695 train_time:9764ms step_avg:97.64ms
step:101/1695 train_time:9858ms step_avg:97.61ms
step:102/1695 train_time:9952ms step_avg:97.57ms
step:103/1695 train_time:10047ms step_avg:97.54ms
step:104/1695 train_time:10141ms step_avg:97.51ms
step:105/1695 train_time:10235ms step_avg:97.47ms
step:106/1695 train_time:10329ms step_avg:97.44ms
step:107/1695 train_time:10424ms step_avg:97.42ms
step:108/1695 train_time:10519ms step_avg:97.40ms
step:109/1695 train_time:10613ms step_avg:97.37ms
step:110/1695 train_time:10708ms step_avg:97.34ms
step:111/1695 train_time:10802ms step_avg:97.32ms
step:112/1695 train_time:10896ms step_avg:97.29ms
step:113/1695 train_time:10990ms step_avg:97.25ms
step:114/1695 train_time:11084ms step_avg:97.22ms
step:115/1695 train_time:11178ms step_avg:97.20ms
step:116/1695 train_time:11271ms step_avg:97.17ms
step:117/1695 train_time:11366ms step_avg:97.14ms
step:118/1695 train_time:11460ms step_avg:97.12ms
step:119/1695 train_time:11555ms step_avg:97.10ms
step:120/1695 train_time:11649ms step_avg:97.07ms
step:121/1695 train_time:11744ms step_avg:97.05ms
step:122/1695 train_time:11839ms step_avg:97.04ms
step:123/1695 train_time:11933ms step_avg:97.01ms
step:124/1695 train_time:12028ms step_avg:97.00ms
step:125/1695 train_time:12122ms step_avg:96.98ms
step:125/1695 val_loss:4.3129 train_time:12214ms step_avg:97.71ms
step:126/1695 train_time:12238ms step_avg:97.13ms
step:127/1695 train_time:12320ms step_avg:97.01ms
step:128/1695 train_time:12421ms step_avg:97.04ms
step:129/1695 train_time:12516ms step_avg:97.02ms
step:130/1695 train_time:12609ms step_avg:97.00ms
step:131/1695 train_time:12702ms step_avg:96.96ms
step:132/1695 train_time:12795ms step_avg:96.94ms
step:133/1695 train_time:12889ms step_avg:96.91ms
step:134/1695 train_time:12982ms step_avg:96.88ms
step:135/1695 train_time:13075ms step_avg:96.85ms
step:136/1695 train_time:13168ms step_avg:96.83ms
step:137/1695 train_time:13264ms step_avg:96.82ms
step:138/1695 train_time:13359ms step_avg:96.81ms
step:139/1695 train_time:13455ms step_avg:96.80ms
step:140/1695 train_time:13550ms step_avg:96.79ms
step:141/1695 train_time:13645ms step_avg:96.77ms
step:142/1695 train_time:13739ms step_avg:96.75ms
step:143/1695 train_time:13832ms step_avg:96.73ms
step:144/1695 train_time:13926ms step_avg:96.71ms
step:145/1695 train_time:14019ms step_avg:96.68ms
step:146/1695 train_time:14112ms step_avg:96.66ms
step:147/1695 train_time:14206ms step_avg:96.64ms
step:148/1695 train_time:14302ms step_avg:96.63ms
step:149/1695 train_time:14396ms step_avg:96.62ms
step:150/1695 train_time:14492ms step_avg:96.61ms
step:151/1695 train_time:14586ms step_avg:96.60ms
step:152/1695 train_time:14681ms step_avg:96.59ms
step:153/1695 train_time:14775ms step_avg:96.57ms
step:154/1695 train_time:14869ms step_avg:96.55ms
step:155/1695 train_time:14963ms step_avg:96.53ms
step:156/1695 train_time:15056ms step_avg:96.51ms
step:157/1695 train_time:15149ms step_avg:96.49ms
step:158/1695 train_time:15245ms step_avg:96.49ms
step:159/1695 train_time:15340ms step_avg:96.48ms
step:160/1695 train_time:15434ms step_avg:96.46ms
step:161/1695 train_time:15529ms step_avg:96.45ms
step:162/1695 train_time:15624ms step_avg:96.45ms
step:163/1695 train_time:15719ms step_avg:96.44ms
step:164/1695 train_time:15813ms step_avg:96.42ms
step:165/1695 train_time:15907ms step_avg:96.40ms
step:166/1695 train_time:16001ms step_avg:96.39ms
step:167/1695 train_time:16095ms step_avg:96.38ms
step:168/1695 train_time:16189ms step_avg:96.36ms
step:169/1695 train_time:16283ms step_avg:96.35ms
step:170/1695 train_time:16378ms step_avg:96.34ms
step:171/1695 train_time:16471ms step_avg:96.32ms
step:172/1695 train_time:16567ms step_avg:96.32ms
step:173/1695 train_time:16951ms step_avg:97.98ms
step:174/1695 train_time:17020ms step_avg:97.82ms
step:175/1695 train_time:17112ms step_avg:97.78ms
step:176/1695 train_time:17206ms step_avg:97.76ms
step:177/1695 train_time:17299ms step_avg:97.73ms
step:178/1695 train_time:17391ms step_avg:97.70ms
step:179/1695 train_time:17484ms step_avg:97.68ms
step:180/1695 train_time:17578ms step_avg:97.65ms
step:181/1695 train_time:17671ms step_avg:97.63ms
step:182/1695 train_time:17764ms step_avg:97.61ms
step:183/1695 train_time:17859ms step_avg:97.59ms
step:184/1695 train_time:17956ms step_avg:97.59ms
step:185/1695 train_time:18052ms step_avg:97.58ms
step:186/1695 train_time:18148ms step_avg:97.57ms
step:187/1695 train_time:18243ms step_avg:97.56ms
step:188/1695 train_time:18336ms step_avg:97.53ms
step:189/1695 train_time:18429ms step_avg:97.51ms
step:190/1695 train_time:18522ms step_avg:97.49ms
step:191/1695 train_time:18615ms step_avg:97.46ms
step:192/1695 train_time:18709ms step_avg:97.44ms
step:193/1695 train_time:18803ms step_avg:97.42ms
step:194/1695 train_time:18898ms step_avg:97.41ms
step:195/1695 train_time:18993ms step_avg:97.40ms
step:196/1695 train_time:19088ms step_avg:97.39ms
step:197/1695 train_time:19184ms step_avg:97.38ms
step:198/1695 train_time:19278ms step_avg:97.37ms
step:199/1695 train_time:19372ms step_avg:97.35ms
step:200/1695 train_time:19466ms step_avg:97.33ms
step:201/1695 train_time:19560ms step_avg:97.31ms
step:202/1695 train_time:19652ms step_avg:97.29ms
step:203/1695 train_time:19747ms step_avg:97.28ms
step:204/1695 train_time:19841ms step_avg:97.26ms
step:205/1695 train_time:19935ms step_avg:97.24ms
step:206/1695 train_time:20030ms step_avg:97.23ms
step:207/1695 train_time:20124ms step_avg:97.22ms
step:208/1695 train_time:20219ms step_avg:97.21ms
step:209/1695 train_time:20312ms step_avg:97.19ms
step:210/1695 train_time:20406ms step_avg:97.17ms
step:211/1695 train_time:20500ms step_avg:97.16ms
step:212/1695 train_time:20593ms step_avg:97.14ms
step:213/1695 train_time:20686ms step_avg:97.12ms
step:214/1695 train_time:20781ms step_avg:97.11ms
step:215/1695 train_time:20874ms step_avg:97.09ms
step:216/1695 train_time:20969ms step_avg:97.08ms
step:217/1695 train_time:21063ms step_avg:97.07ms
step:218/1695 train_time:21158ms step_avg:97.05ms
step:219/1695 train_time:21252ms step_avg:97.04ms
step:220/1695 train_time:21348ms step_avg:97.04ms
step:221/1695 train_time:21442ms step_avg:97.02ms
step:222/1695 train_time:21535ms step_avg:97.01ms
step:223/1695 train_time:21629ms step_avg:96.99ms
step:224/1695 train_time:21723ms step_avg:96.98ms
step:225/1695 train_time:21817ms step_avg:96.97ms
step:226/1695 train_time:21911ms step_avg:96.95ms
step:227/1695 train_time:22005ms step_avg:96.94ms
step:228/1695 train_time:22099ms step_avg:96.93ms
step:229/1695 train_time:22193ms step_avg:96.91ms
step:230/1695 train_time:22287ms step_avg:96.90ms
step:231/1695 train_time:22382ms step_avg:96.89ms
step:232/1695 train_time:22476ms step_avg:96.88ms
step:233/1695 train_time:22570ms step_avg:96.87ms
step:234/1695 train_time:22663ms step_avg:96.85ms
step:235/1695 train_time:22756ms step_avg:96.83ms
step:236/1695 train_time:22850ms step_avg:96.82ms
step:237/1695 train_time:22945ms step_avg:96.81ms
step:238/1695 train_time:23040ms step_avg:96.81ms
step:239/1695 train_time:23134ms step_avg:96.79ms
step:240/1695 train_time:23228ms step_avg:96.78ms
step:241/1695 train_time:23323ms step_avg:96.78ms
step:242/1695 train_time:23418ms step_avg:96.77ms
step:243/1695 train_time:23512ms step_avg:96.76ms
step:244/1695 train_time:23606ms step_avg:96.75ms
step:245/1695 train_time:23699ms step_avg:96.73ms
step:246/1695 train_time:23792ms step_avg:96.72ms
step:247/1695 train_time:23886ms step_avg:96.71ms
step:248/1695 train_time:23981ms step_avg:96.70ms
step:249/1695 train_time:24075ms step_avg:96.69ms
step:250/1695 train_time:24169ms step_avg:96.68ms
step:250/1695 val_loss:3.9787 train_time:24262ms step_avg:97.05ms
step:251/1695 train_time:24286ms step_avg:96.76ms
step:252/1695 train_time:24364ms step_avg:96.68ms
step:253/1695 train_time:24461ms step_avg:96.68ms
step:254/1695 train_time:24555ms step_avg:96.67ms
step:255/1695 train_time:24648ms step_avg:96.66ms
step:256/1695 train_time:24742ms step_avg:96.65ms
step:257/1695 train_time:24835ms step_avg:96.63ms
step:258/1695 train_time:24928ms step_avg:96.62ms
step:259/1695 train_time:25021ms step_avg:96.61ms
step:260/1695 train_time:25114ms step_avg:96.59ms
step:261/1695 train_time:25208ms step_avg:96.58ms
step:262/1695 train_time:25304ms step_avg:96.58ms
step:263/1695 train_time:25401ms step_avg:96.58ms
step:264/1695 train_time:25495ms step_avg:96.57ms
step:265/1695 train_time:25590ms step_avg:96.57ms
step:266/1695 train_time:25684ms step_avg:96.56ms
step:267/1695 train_time:25777ms step_avg:96.54ms
step:268/1695 train_time:25870ms step_avg:96.53ms
step:269/1695 train_time:25964ms step_avg:96.52ms
step:270/1695 train_time:26058ms step_avg:96.51ms
step:271/1695 train_time:26151ms step_avg:96.50ms
step:272/1695 train_time:26245ms step_avg:96.49ms
step:273/1695 train_time:26341ms step_avg:96.49ms
step:274/1695 train_time:26436ms step_avg:96.48ms
step:275/1695 train_time:26531ms step_avg:96.48ms
step:276/1695 train_time:26626ms step_avg:96.47ms
step:277/1695 train_time:26720ms step_avg:96.46ms
step:278/1695 train_time:26813ms step_avg:96.45ms
step:279/1695 train_time:26906ms step_avg:96.44ms
step:280/1695 train_time:26999ms step_avg:96.43ms
step:281/1695 train_time:27092ms step_avg:96.41ms
step:282/1695 train_time:27187ms step_avg:96.41ms
step:283/1695 train_time:27282ms step_avg:96.40ms
step:284/1695 train_time:27376ms step_avg:96.40ms
step:285/1695 train_time:27471ms step_avg:96.39ms
step:286/1695 train_time:27566ms step_avg:96.39ms
step:287/1695 train_time:27661ms step_avg:96.38ms
step:288/1695 train_time:27754ms step_avg:96.37ms
step:289/1695 train_time:27849ms step_avg:96.36ms
step:290/1695 train_time:27943ms step_avg:96.35ms
step:291/1695 train_time:28037ms step_avg:96.35ms
step:292/1695 train_time:28130ms step_avg:96.33ms
step:293/1695 train_time:28224ms step_avg:96.33ms
step:294/1695 train_time:28318ms step_avg:96.32ms
step:295/1695 train_time:28412ms step_avg:96.31ms
step:296/1695 train_time:28507ms step_avg:96.31ms
step:297/1695 train_time:28603ms step_avg:96.30ms
step:298/1695 train_time:28697ms step_avg:96.30ms
step:299/1695 train_time:28791ms step_avg:96.29ms
step:300/1695 train_time:28885ms step_avg:96.28ms
step:301/1695 train_time:28979ms step_avg:96.27ms
step:302/1695 train_time:29072ms step_avg:96.27ms
step:303/1695 train_time:29166ms step_avg:96.26ms
step:304/1695 train_time:29261ms step_avg:96.25ms
step:305/1695 train_time:29355ms step_avg:96.25ms
step:306/1695 train_time:29449ms step_avg:96.24ms
step:307/1695 train_time:29544ms step_avg:96.23ms
step:308/1695 train_time:29638ms step_avg:96.23ms
step:309/1695 train_time:29732ms step_avg:96.22ms
step:310/1695 train_time:29827ms step_avg:96.21ms
step:311/1695 train_time:29921ms step_avg:96.21ms
step:312/1695 train_time:30014ms step_avg:96.20ms
step:313/1695 train_time:30108ms step_avg:96.19ms
step:314/1695 train_time:30203ms step_avg:96.19ms
step:315/1695 train_time:30297ms step_avg:96.18ms
step:316/1695 train_time:30391ms step_avg:96.17ms
step:317/1695 train_time:30486ms step_avg:96.17ms
step:318/1695 train_time:30580ms step_avg:96.16ms
step:319/1695 train_time:30674ms step_avg:96.16ms
step:320/1695 train_time:30769ms step_avg:96.15ms
step:321/1695 train_time:30864ms step_avg:96.15ms
step:322/1695 train_time:30957ms step_avg:96.14ms
step:323/1695 train_time:31050ms step_avg:96.13ms
step:324/1695 train_time:31145ms step_avg:96.13ms
step:325/1695 train_time:31239ms step_avg:96.12ms
step:326/1695 train_time:31333ms step_avg:96.11ms
step:327/1695 train_time:31428ms step_avg:96.11ms
step:328/1695 train_time:31523ms step_avg:96.11ms
step:329/1695 train_time:31616ms step_avg:96.10ms
step:330/1695 train_time:31710ms step_avg:96.09ms
step:331/1695 train_time:31805ms step_avg:96.09ms
step:332/1695 train_time:31899ms step_avg:96.08ms
step:333/1695 train_time:31993ms step_avg:96.07ms
step:334/1695 train_time:32087ms step_avg:96.07ms
step:335/1695 train_time:32180ms step_avg:96.06ms
step:336/1695 train_time:32274ms step_avg:96.05ms
step:337/1695 train_time:32368ms step_avg:96.05ms
step:338/1695 train_time:32468ms step_avg:96.06ms
step:339/1695 train_time:32561ms step_avg:96.05ms
step:340/1695 train_time:32655ms step_avg:96.04ms
step:341/1695 train_time:32748ms step_avg:96.04ms
step:342/1695 train_time:32839ms step_avg:96.02ms
step:343/1695 train_time:32933ms step_avg:96.01ms
step:344/1695 train_time:33027ms step_avg:96.01ms
step:345/1695 train_time:33355ms step_avg:96.68ms
step:346/1695 train_time:33456ms step_avg:96.69ms
step:347/1695 train_time:33548ms step_avg:96.68ms
step:348/1695 train_time:33642ms step_avg:96.67ms
step:349/1695 train_time:33735ms step_avg:96.66ms
step:350/1695 train_time:33828ms step_avg:96.65ms
step:351/1695 train_time:33921ms step_avg:96.64ms
step:352/1695 train_time:34014ms step_avg:96.63ms
step:353/1695 train_time:34106ms step_avg:96.62ms
step:354/1695 train_time:34200ms step_avg:96.61ms
step:355/1695 train_time:34296ms step_avg:96.61ms
step:356/1695 train_time:34393ms step_avg:96.61ms
step:357/1695 train_time:34490ms step_avg:96.61ms
step:358/1695 train_time:34584ms step_avg:96.60ms
step:359/1695 train_time:34678ms step_avg:96.60ms
step:360/1695 train_time:34771ms step_avg:96.59ms
step:361/1695 train_time:34865ms step_avg:96.58ms
step:362/1695 train_time:34959ms step_avg:96.57ms
step:363/1695 train_time:35051ms step_avg:96.56ms
step:364/1695 train_time:35145ms step_avg:96.55ms
step:365/1695 train_time:35238ms step_avg:96.54ms
step:366/1695 train_time:35332ms step_avg:96.54ms
step:367/1695 train_time:35428ms step_avg:96.53ms
step:368/1695 train_time:35523ms step_avg:96.53ms
step:369/1695 train_time:35616ms step_avg:96.52ms
step:370/1695 train_time:35710ms step_avg:96.51ms
step:371/1695 train_time:35803ms step_avg:96.51ms
step:372/1695 train_time:35897ms step_avg:96.50ms
step:373/1695 train_time:35990ms step_avg:96.49ms
step:374/1695 train_time:36083ms step_avg:96.48ms
step:375/1695 train_time:36176ms step_avg:96.47ms
step:375/1695 val_loss:3.8232 train_time:36268ms step_avg:96.71ms
step:376/1695 train_time:36292ms step_avg:96.52ms
step:377/1695 train_time:36372ms step_avg:96.48ms
step:378/1695 train_time:36470ms step_avg:96.48ms
step:379/1695 train_time:36565ms step_avg:96.48ms
step:380/1695 train_time:36659ms step_avg:96.47ms
step:381/1695 train_time:36752ms step_avg:96.46ms
step:382/1695 train_time:36845ms step_avg:96.45ms
step:383/1695 train_time:36938ms step_avg:96.44ms
step:384/1695 train_time:37031ms step_avg:96.43ms
step:385/1695 train_time:37124ms step_avg:96.43ms
step:386/1695 train_time:37218ms step_avg:96.42ms
step:387/1695 train_time:37313ms step_avg:96.42ms
step:388/1695 train_time:37410ms step_avg:96.42ms
step:389/1695 train_time:37505ms step_avg:96.41ms
step:390/1695 train_time:37599ms step_avg:96.41ms
step:391/1695 train_time:37693ms step_avg:96.40ms
step:392/1695 train_time:37787ms step_avg:96.40ms
step:393/1695 train_time:37880ms step_avg:96.39ms
step:394/1695 train_time:37973ms step_avg:96.38ms
step:395/1695 train_time:38067ms step_avg:96.37ms
step:396/1695 train_time:38160ms step_avg:96.36ms
step:397/1695 train_time:38254ms step_avg:96.36ms
step:398/1695 train_time:38350ms step_avg:96.36ms
step:399/1695 train_time:38445ms step_avg:96.35ms
step:400/1695 train_time:38540ms step_avg:96.35ms
step:401/1695 train_time:38633ms step_avg:96.34ms
step:402/1695 train_time:38727ms step_avg:96.34ms
step:403/1695 train_time:38822ms step_avg:96.33ms
step:404/1695 train_time:38915ms step_avg:96.32ms
step:405/1695 train_time:39008ms step_avg:96.32ms
step:406/1695 train_time:39101ms step_avg:96.31ms
step:407/1695 train_time:39194ms step_avg:96.30ms
step:408/1695 train_time:39289ms step_avg:96.30ms
step:409/1695 train_time:39384ms step_avg:96.29ms
step:410/1695 train_time:39478ms step_avg:96.29ms
step:411/1695 train_time:39572ms step_avg:96.28ms
step:412/1695 train_time:39667ms step_avg:96.28ms
step:413/1695 train_time:39762ms step_avg:96.28ms
step:414/1695 train_time:39856ms step_avg:96.27ms
step:415/1695 train_time:39949ms step_avg:96.26ms
step:416/1695 train_time:40043ms step_avg:96.26ms
step:417/1695 train_time:40137ms step_avg:96.25ms
step:418/1695 train_time:40230ms step_avg:96.24ms
step:419/1695 train_time:40324ms step_avg:96.24ms
step:420/1695 train_time:40419ms step_avg:96.24ms
step:421/1695 train_time:40513ms step_avg:96.23ms
step:422/1695 train_time:40607ms step_avg:96.22ms
step:423/1695 train_time:40702ms step_avg:96.22ms
step:424/1695 train_time:40795ms step_avg:96.21ms
step:425/1695 train_time:40889ms step_avg:96.21ms
step:426/1695 train_time:40984ms step_avg:96.21ms
step:427/1695 train_time:41077ms step_avg:96.20ms
step:428/1695 train_time:41170ms step_avg:96.19ms
step:429/1695 train_time:41264ms step_avg:96.19ms
step:430/1695 train_time:41359ms step_avg:96.18ms
step:431/1695 train_time:41453ms step_avg:96.18ms
step:432/1695 train_time:41547ms step_avg:96.17ms
step:433/1695 train_time:41641ms step_avg:96.17ms
step:434/1695 train_time:41734ms step_avg:96.16ms
step:435/1695 train_time:41828ms step_avg:96.16ms
step:436/1695 train_time:41922ms step_avg:96.15ms
step:437/1695 train_time:42016ms step_avg:96.15ms
step:438/1695 train_time:42110ms step_avg:96.14ms
step:439/1695 train_time:42203ms step_avg:96.13ms
step:440/1695 train_time:42297ms step_avg:96.13ms
step:441/1695 train_time:42392ms step_avg:96.13ms
step:442/1695 train_time:42487ms step_avg:96.12ms
step:443/1695 train_time:42583ms step_avg:96.12ms
step:444/1695 train_time:42676ms step_avg:96.12ms
step:445/1695 train_time:42770ms step_avg:96.11ms
step:446/1695 train_time:42864ms step_avg:96.11ms
step:447/1695 train_time:42957ms step_avg:96.10ms
step:448/1695 train_time:43050ms step_avg:96.09ms
step:449/1695 train_time:43144ms step_avg:96.09ms
step:450/1695 train_time:43237ms step_avg:96.08ms
step:451/1695 train_time:43331ms step_avg:96.08ms
step:452/1695 train_time:43426ms step_avg:96.07ms
step:453/1695 train_time:43519ms step_avg:96.07ms
step:454/1695 train_time:43613ms step_avg:96.06ms
step:455/1695 train_time:43707ms step_avg:96.06ms
step:456/1695 train_time:43801ms step_avg:96.06ms
step:457/1695 train_time:43895ms step_avg:96.05ms
step:458/1695 train_time:43990ms step_avg:96.05ms
step:459/1695 train_time:44084ms step_avg:96.04ms
step:460/1695 train_time:44178ms step_avg:96.04ms
step:461/1695 train_time:44271ms step_avg:96.03ms
step:462/1695 train_time:44365ms step_avg:96.03ms
step:463/1695 train_time:44459ms step_avg:96.02ms
step:464/1695 train_time:44553ms step_avg:96.02ms
step:465/1695 train_time:44647ms step_avg:96.02ms
step:466/1695 train_time:44742ms step_avg:96.01ms
step:467/1695 train_time:44836ms step_avg:96.01ms
step:468/1695 train_time:44930ms step_avg:96.00ms
step:469/1695 train_time:45025ms step_avg:96.00ms
step:470/1695 train_time:45119ms step_avg:96.00ms
step:471/1695 train_time:45212ms step_avg:95.99ms
step:472/1695 train_time:45306ms step_avg:95.99ms
step:473/1695 train_time:45401ms step_avg:95.98ms
step:474/1695 train_time:45494ms step_avg:95.98ms
step:475/1695 train_time:45589ms step_avg:95.98ms
step:476/1695 train_time:45683ms step_avg:95.97ms
step:477/1695 train_time:45777ms step_avg:95.97ms
step:478/1695 train_time:45870ms step_avg:95.96ms
step:479/1695 train_time:45964ms step_avg:95.96ms
step:480/1695 train_time:46059ms step_avg:95.96ms
step:481/1695 train_time:46153ms step_avg:95.95ms
step:482/1695 train_time:46247ms step_avg:95.95ms
step:483/1695 train_time:46341ms step_avg:95.94ms
step:484/1695 train_time:46435ms step_avg:95.94ms
step:485/1695 train_time:46529ms step_avg:95.94ms
step:486/1695 train_time:46623ms step_avg:95.93ms
step:487/1695 train_time:46718ms step_avg:95.93ms
step:488/1695 train_time:46811ms step_avg:95.92ms
step:489/1695 train_time:46905ms step_avg:95.92ms
step:490/1695 train_time:46998ms step_avg:95.91ms
step:491/1695 train_time:47092ms step_avg:95.91ms
step:492/1695 train_time:47186ms step_avg:95.91ms
step:493/1695 train_time:47280ms step_avg:95.90ms
step:494/1695 train_time:47374ms step_avg:95.90ms
step:495/1695 train_time:47468ms step_avg:95.89ms
step:496/1695 train_time:47562ms step_avg:95.89ms
step:497/1695 train_time:47657ms step_avg:95.89ms
step:498/1695 train_time:47751ms step_avg:95.88ms
step:499/1695 train_time:47845ms step_avg:95.88ms
step:500/1695 train_time:47938ms step_avg:95.88ms
step:500/1695 val_loss:3.7202 train_time:48030ms step_avg:96.06ms
step:501/1695 train_time:48054ms step_avg:95.92ms
step:502/1695 train_time:48133ms step_avg:95.88ms
step:503/1695 train_time:48232ms step_avg:95.89ms
step:504/1695 train_time:48327ms step_avg:95.89ms
step:505/1695 train_time:48419ms step_avg:95.88ms
step:506/1695 train_time:48513ms step_avg:95.88ms
step:507/1695 train_time:48607ms step_avg:95.87ms
step:508/1695 train_time:48699ms step_avg:95.86ms
step:509/1695 train_time:48792ms step_avg:95.86ms
step:510/1695 train_time:48885ms step_avg:95.85ms
step:511/1695 train_time:48979ms step_avg:95.85ms
step:512/1695 train_time:49076ms step_avg:95.85ms
step:513/1695 train_time:49173ms step_avg:95.85ms
step:514/1695 train_time:49268ms step_avg:95.85ms
step:515/1695 train_time:49363ms step_avg:95.85ms
step:516/1695 train_time:49456ms step_avg:95.84ms
step:517/1695 train_time:49549ms step_avg:95.84ms
step:518/1695 train_time:49643ms step_avg:95.84ms
step:519/1695 train_time:49968ms step_avg:96.28ms
step:520/1695 train_time:50168ms step_avg:96.48ms
step:521/1695 train_time:50261ms step_avg:96.47ms
step:522/1695 train_time:50353ms step_avg:96.46ms
step:523/1695 train_time:50446ms step_avg:96.46ms
step:524/1695 train_time:50539ms step_avg:96.45ms
step:525/1695 train_time:50632ms step_avg:96.44ms
step:526/1695 train_time:50725ms step_avg:96.43ms
step:527/1695 train_time:50817ms step_avg:96.43ms
step:528/1695 train_time:50910ms step_avg:96.42ms
step:529/1695 train_time:51008ms step_avg:96.42ms
step:530/1695 train_time:51106ms step_avg:96.43ms
step:531/1695 train_time:51202ms step_avg:96.43ms
step:532/1695 train_time:51296ms step_avg:96.42ms
step:533/1695 train_time:51389ms step_avg:96.41ms
step:534/1695 train_time:51482ms step_avg:96.41ms
step:535/1695 train_time:51575ms step_avg:96.40ms
step:536/1695 train_time:51668ms step_avg:96.40ms
step:537/1695 train_time:51761ms step_avg:96.39ms
step:538/1695 train_time:51854ms step_avg:96.38ms
step:539/1695 train_time:51949ms step_avg:96.38ms
step:540/1695 train_time:52044ms step_avg:96.38ms
step:541/1695 train_time:52139ms step_avg:96.38ms
step:542/1695 train_time:52234ms step_avg:96.37ms
step:543/1695 train_time:52328ms step_avg:96.37ms
step:544/1695 train_time:52421ms step_avg:96.36ms
step:545/1695 train_time:52515ms step_avg:96.36ms
step:546/1695 train_time:52609ms step_avg:96.35ms
step:547/1695 train_time:52702ms step_avg:96.35ms
step:548/1695 train_time:52795ms step_avg:96.34ms
step:549/1695 train_time:52889ms step_avg:96.34ms
step:550/1695 train_time:52983ms step_avg:96.33ms
step:551/1695 train_time:53077ms step_avg:96.33ms
step:552/1695 train_time:53172ms step_avg:96.33ms
step:553/1695 train_time:53267ms step_avg:96.32ms
step:554/1695 train_time:53361ms step_avg:96.32ms
step:555/1695 train_time:53454ms step_avg:96.31ms
step:556/1695 train_time:53548ms step_avg:96.31ms
step:557/1695 train_time:53640ms step_avg:96.30ms
step:558/1695 train_time:53734ms step_avg:96.30ms
step:559/1695 train_time:53827ms step_avg:96.29ms
step:560/1695 train_time:53920ms step_avg:96.29ms
step:561/1695 train_time:54015ms step_avg:96.28ms
step:562/1695 train_time:54111ms step_avg:96.28ms
step:563/1695 train_time:54207ms step_avg:96.28ms
step:564/1695 train_time:54301ms step_avg:96.28ms
step:565/1695 train_time:54395ms step_avg:96.27ms
step:566/1695 train_time:54488ms step_avg:96.27ms
step:567/1695 train_time:54583ms step_avg:96.27ms
step:568/1695 train_time:54678ms step_avg:96.26ms
step:569/1695 train_time:54774ms step_avg:96.26ms
step:570/1695 train_time:54869ms step_avg:96.26ms
step:571/1695 train_time:54965ms step_avg:96.26ms
step:572/1695 train_time:55061ms step_avg:96.26ms
step:573/1695 train_time:55157ms step_avg:96.26ms
step:574/1695 train_time:55253ms step_avg:96.26ms
step:575/1695 train_time:55349ms step_avg:96.26ms
step:576/1695 train_time:55445ms step_avg:96.26ms
step:577/1695 train_time:55540ms step_avg:96.26ms
step:578/1695 train_time:55636ms step_avg:96.26ms
step:579/1695 train_time:55732ms step_avg:96.26ms
step:580/1695 train_time:55828ms step_avg:96.25ms
step:581/1695 train_time:55923ms step_avg:96.25ms
step:582/1695 train_time:56018ms step_avg:96.25ms
step:583/1695 train_time:56116ms step_avg:96.25ms
step:584/1695 train_time:56213ms step_avg:96.25ms
step:585/1695 train_time:56310ms step_avg:96.26ms
step:586/1695 train_time:56407ms step_avg:96.26ms
step:587/1695 train_time:56502ms step_avg:96.26ms
step:588/1695 train_time:56597ms step_avg:96.25ms
step:589/1695 train_time:56693ms step_avg:96.25ms
step:590/1695 train_time:56789ms step_avg:96.25ms
step:591/1695 train_time:56885ms step_avg:96.25ms
step:592/1695 train_time:56981ms step_avg:96.25ms
step:593/1695 train_time:57077ms step_avg:96.25ms
step:594/1695 train_time:57173ms step_avg:96.25ms
step:595/1695 train_time:57270ms step_avg:96.25ms
step:596/1695 train_time:57365ms step_avg:96.25ms
step:597/1695 train_time:57461ms step_avg:96.25ms
step:598/1695 train_time:57556ms step_avg:96.25ms
step:599/1695 train_time:57653ms step_avg:96.25ms
step:600/1695 train_time:57749ms step_avg:96.25ms
step:601/1695 train_time:57845ms step_avg:96.25ms
step:602/1695 train_time:57941ms step_avg:96.25ms
step:603/1695 train_time:58037ms step_avg:96.25ms
step:604/1695 train_time:58134ms step_avg:96.25ms
step:605/1695 train_time:58230ms step_avg:96.25ms
step:606/1695 train_time:58326ms step_avg:96.25ms
step:607/1695 train_time:58421ms step_avg:96.25ms
step:608/1695 train_time:58518ms step_avg:96.25ms
step:609/1695 train_time:58614ms step_avg:96.25ms
step:610/1695 train_time:58711ms step_avg:96.25ms
step:611/1695 train_time:58808ms step_avg:96.25ms
step:612/1695 train_time:58904ms step_avg:96.25ms
step:613/1695 train_time:59000ms step_avg:96.25ms
step:614/1695 train_time:59095ms step_avg:96.25ms
step:615/1695 train_time:59192ms step_avg:96.25ms
step:616/1695 train_time:59289ms step_avg:96.25ms
step:617/1695 train_time:59385ms step_avg:96.25ms
step:618/1695 train_time:59481ms step_avg:96.25ms
step:619/1695 train_time:59576ms step_avg:96.25ms
step:620/1695 train_time:59673ms step_avg:96.25ms
step:621/1695 train_time:59769ms step_avg:96.25ms
step:622/1695 train_time:59865ms step_avg:96.25ms
step:623/1695 train_time:59960ms step_avg:96.24ms
step:624/1695 train_time:60056ms step_avg:96.24ms
step:625/1695 train_time:60152ms step_avg:96.24ms
step:625/1695 val_loss:3.6216 train_time:60246ms step_avg:96.39ms
step:626/1695 train_time:60272ms step_avg:96.28ms
step:627/1695 train_time:60351ms step_avg:96.25ms
step:628/1695 train_time:60448ms step_avg:96.25ms
step:629/1695 train_time:60544ms step_avg:96.25ms
step:630/1695 train_time:60638ms step_avg:96.25ms
step:631/1695 train_time:60733ms step_avg:96.25ms
step:632/1695 train_time:60828ms step_avg:96.25ms
step:633/1695 train_time:60923ms step_avg:96.25ms
step:634/1695 train_time:61018ms step_avg:96.24ms
step:635/1695 train_time:61112ms step_avg:96.24ms
step:636/1695 train_time:61210ms step_avg:96.24ms
step:637/1695 train_time:61308ms step_avg:96.25ms
step:638/1695 train_time:61406ms step_avg:96.25ms
step:639/1695 train_time:61503ms step_avg:96.25ms
step:640/1695 train_time:61598ms step_avg:96.25ms
step:641/1695 train_time:61693ms step_avg:96.24ms
step:642/1695 train_time:61788ms step_avg:96.24ms
step:643/1695 train_time:61883ms step_avg:96.24ms
step:644/1695 train_time:61977ms step_avg:96.24ms
step:645/1695 train_time:62072ms step_avg:96.24ms
step:646/1695 train_time:62168ms step_avg:96.23ms
step:647/1695 train_time:62264ms step_avg:96.24ms
step:648/1695 train_time:62361ms step_avg:96.24ms
step:649/1695 train_time:62458ms step_avg:96.24ms
step:650/1695 train_time:62554ms step_avg:96.24ms
step:651/1695 train_time:62651ms step_avg:96.24ms
step:652/1695 train_time:62747ms step_avg:96.24ms
step:653/1695 train_time:62843ms step_avg:96.24ms
step:654/1695 train_time:62937ms step_avg:96.23ms
step:655/1695 train_time:63034ms step_avg:96.23ms
step:656/1695 train_time:63130ms step_avg:96.24ms
step:657/1695 train_time:63228ms step_avg:96.24ms
step:658/1695 train_time:63324ms step_avg:96.24ms
step:659/1695 train_time:63420ms step_avg:96.24ms
step:660/1695 train_time:63515ms step_avg:96.24ms
step:661/1695 train_time:63612ms step_avg:96.24ms
step:662/1695 train_time:63707ms step_avg:96.23ms
step:663/1695 train_time:63803ms step_avg:96.23ms
step:664/1695 train_time:63897ms step_avg:96.23ms
step:665/1695 train_time:63993ms step_avg:96.23ms
step:666/1695 train_time:64089ms step_avg:96.23ms
step:667/1695 train_time:64186ms step_avg:96.23ms
step:668/1695 train_time:64282ms step_avg:96.23ms
step:669/1695 train_time:64377ms step_avg:96.23ms
step:670/1695 train_time:64473ms step_avg:96.23ms
step:671/1695 train_time:64570ms step_avg:96.23ms
step:672/1695 train_time:64666ms step_avg:96.23ms
step:673/1695 train_time:64762ms step_avg:96.23ms
step:674/1695 train_time:64857ms step_avg:96.23ms
step:675/1695 train_time:64954ms step_avg:96.23ms
step:676/1695 train_time:65048ms step_avg:96.23ms
step:677/1695 train_time:65144ms step_avg:96.22ms
step:678/1695 train_time:65238ms step_avg:96.22ms
step:679/1695 train_time:65335ms step_avg:96.22ms
step:680/1695 train_time:65431ms step_avg:96.22ms
step:681/1695 train_time:65528ms step_avg:96.22ms
step:682/1695 train_time:65624ms step_avg:96.22ms
step:683/1695 train_time:65720ms step_avg:96.22ms
step:684/1695 train_time:65815ms step_avg:96.22ms
step:685/1695 train_time:65911ms step_avg:96.22ms
step:686/1695 train_time:66007ms step_avg:96.22ms
step:687/1695 train_time:66103ms step_avg:96.22ms
step:688/1695 train_time:66199ms step_avg:96.22ms
step:689/1695 train_time:66294ms step_avg:96.22ms
step:690/1695 train_time:66390ms step_avg:96.22ms
step:691/1695 train_time:66847ms step_avg:96.74ms
step:692/1695 train_time:66917ms step_avg:96.70ms
step:693/1695 train_time:67011ms step_avg:96.70ms
step:694/1695 train_time:67106ms step_avg:96.69ms
step:695/1695 train_time:67201ms step_avg:96.69ms
step:696/1695 train_time:67296ms step_avg:96.69ms
step:697/1695 train_time:67392ms step_avg:96.69ms
step:698/1695 train_time:67487ms step_avg:96.69ms
step:699/1695 train_time:67581ms step_avg:96.68ms
step:700/1695 train_time:67676ms step_avg:96.68ms
step:701/1695 train_time:67776ms step_avg:96.69ms
step:702/1695 train_time:67879ms step_avg:96.69ms
step:703/1695 train_time:67976ms step_avg:96.69ms
step:704/1695 train_time:68073ms step_avg:96.69ms
step:705/1695 train_time:68169ms step_avg:96.69ms
step:706/1695 train_time:68266ms step_avg:96.69ms
step:707/1695 train_time:68361ms step_avg:96.69ms
step:708/1695 train_time:68455ms step_avg:96.69ms
step:709/1695 train_time:68550ms step_avg:96.69ms
step:710/1695 train_time:68645ms step_avg:96.68ms
step:711/1695 train_time:68741ms step_avg:96.68ms
step:712/1695 train_time:68838ms step_avg:96.68ms
step:713/1695 train_time:68936ms step_avg:96.68ms
step:714/1695 train_time:69034ms step_avg:96.69ms
step:715/1695 train_time:69130ms step_avg:96.69ms
step:716/1695 train_time:69226ms step_avg:96.68ms
step:717/1695 train_time:69321ms step_avg:96.68ms
step:718/1695 train_time:69416ms step_avg:96.68ms
step:719/1695 train_time:69512ms step_avg:96.68ms
step:720/1695 train_time:69607ms step_avg:96.68ms
step:721/1695 train_time:69702ms step_avg:96.67ms
step:722/1695 train_time:69799ms step_avg:96.67ms
step:723/1695 train_time:69895ms step_avg:96.67ms
step:724/1695 train_time:69992ms step_avg:96.67ms
step:725/1695 train_time:70088ms step_avg:96.67ms
step:726/1695 train_time:70185ms step_avg:96.67ms
step:727/1695 train_time:70280ms step_avg:96.67ms
step:728/1695 train_time:70375ms step_avg:96.67ms
step:729/1695 train_time:70471ms step_avg:96.67ms
step:730/1695 train_time:70566ms step_avg:96.67ms
step:731/1695 train_time:70661ms step_avg:96.66ms
step:732/1695 train_time:70757ms step_avg:96.66ms
step:733/1695 train_time:70853ms step_avg:96.66ms
step:734/1695 train_time:70951ms step_avg:96.66ms
step:735/1695 train_time:71049ms step_avg:96.66ms
step:736/1695 train_time:71145ms step_avg:96.66ms
step:737/1695 train_time:71240ms step_avg:96.66ms
step:738/1695 train_time:71336ms step_avg:96.66ms
step:739/1695 train_time:71432ms step_avg:96.66ms
step:740/1695 train_time:71528ms step_avg:96.66ms
step:741/1695 train_time:71623ms step_avg:96.66ms
step:742/1695 train_time:71719ms step_avg:96.66ms
step:743/1695 train_time:71814ms step_avg:96.65ms
step:744/1695 train_time:71910ms step_avg:96.65ms
step:745/1695 train_time:72007ms step_avg:96.65ms
step:746/1695 train_time:72103ms step_avg:96.65ms
step:747/1695 train_time:72199ms step_avg:96.65ms
step:748/1695 train_time:72295ms step_avg:96.65ms
step:749/1695 train_time:72391ms step_avg:96.65ms
step:750/1695 train_time:72488ms step_avg:96.65ms
step:750/1695 val_loss:3.5671 train_time:72581ms step_avg:96.77ms
step:751/1695 train_time:72608ms step_avg:96.68ms
step:752/1695 train_time:72687ms step_avg:96.66ms
step:753/1695 train_time:72784ms step_avg:96.66ms
step:754/1695 train_time:72880ms step_avg:96.66ms
step:755/1695 train_time:72976ms step_avg:96.66ms
step:756/1695 train_time:73072ms step_avg:96.66ms
step:757/1695 train_time:73167ms step_avg:96.65ms
step:758/1695 train_time:73262ms step_avg:96.65ms
step:759/1695 train_time:73357ms step_avg:96.65ms
step:760/1695 train_time:73452ms step_avg:96.65ms
step:761/1695 train_time:73549ms step_avg:96.65ms
step:762/1695 train_time:73646ms step_avg:96.65ms
step:763/1695 train_time:73744ms step_avg:96.65ms
step:764/1695 train_time:73841ms step_avg:96.65ms
step:765/1695 train_time:73938ms step_avg:96.65ms
step:766/1695 train_time:74034ms step_avg:96.65ms
step:767/1695 train_time:74129ms step_avg:96.65ms
step:768/1695 train_time:74224ms step_avg:96.65ms
step:769/1695 train_time:74319ms step_avg:96.64ms
step:770/1695 train_time:74414ms step_avg:96.64ms
step:771/1695 train_time:74509ms step_avg:96.64ms
step:772/1695 train_time:74606ms step_avg:96.64ms
step:773/1695 train_time:74703ms step_avg:96.64ms
step:774/1695 train_time:74800ms step_avg:96.64ms
step:775/1695 train_time:74897ms step_avg:96.64ms
step:776/1695 train_time:74994ms step_avg:96.64ms
step:777/1695 train_time:75090ms step_avg:96.64ms
step:778/1695 train_time:75185ms step_avg:96.64ms
step:779/1695 train_time:75280ms step_avg:96.64ms
step:780/1695 train_time:75375ms step_avg:96.63ms
step:781/1695 train_time:75472ms step_avg:96.63ms
step:782/1695 train_time:75567ms step_avg:96.63ms
step:783/1695 train_time:75663ms step_avg:96.63ms
step:784/1695 train_time:75760ms step_avg:96.63ms
step:785/1695 train_time:75857ms step_avg:96.63ms
step:786/1695 train_time:75953ms step_avg:96.63ms
step:787/1695 train_time:76049ms step_avg:96.63ms
step:788/1695 train_time:76144ms step_avg:96.63ms
step:789/1695 train_time:76239ms step_avg:96.63ms
step:790/1695 train_time:76335ms step_avg:96.63ms
step:791/1695 train_time:76433ms step_avg:96.63ms
step:792/1695 train_time:76529ms step_avg:96.63ms
step:793/1695 train_time:76624ms step_avg:96.63ms
step:794/1695 train_time:76721ms step_avg:96.63ms
step:795/1695 train_time:76818ms step_avg:96.63ms
step:796/1695 train_time:76916ms step_avg:96.63ms
step:797/1695 train_time:77012ms step_avg:96.63ms
step:798/1695 train_time:77108ms step_avg:96.63ms
step:799/1695 train_time:77202ms step_avg:96.62ms
step:800/1695 train_time:77298ms step_avg:96.62ms
step:801/1695 train_time:77394ms step_avg:96.62ms
step:802/1695 train_time:77490ms step_avg:96.62ms
step:803/1695 train_time:77585ms step_avg:96.62ms
step:804/1695 train_time:77681ms step_avg:96.62ms
step:805/1695 train_time:77778ms step_avg:96.62ms
step:806/1695 train_time:77874ms step_avg:96.62ms
step:807/1695 train_time:77971ms step_avg:96.62ms
step:808/1695 train_time:78067ms step_avg:96.62ms
step:809/1695 train_time:78163ms step_avg:96.62ms
step:810/1695 train_time:78258ms step_avg:96.62ms
step:811/1695 train_time:78355ms step_avg:96.61ms
step:812/1695 train_time:78450ms step_avg:96.61ms
step:813/1695 train_time:78545ms step_avg:96.61ms
step:814/1695 train_time:78641ms step_avg:96.61ms
step:815/1695 train_time:78738ms step_avg:96.61ms
step:816/1695 train_time:78835ms step_avg:96.61ms
step:817/1695 train_time:78932ms step_avg:96.61ms
step:818/1695 train_time:79028ms step_avg:96.61ms
step:819/1695 train_time:79123ms step_avg:96.61ms
step:820/1695 train_time:79219ms step_avg:96.61ms
step:821/1695 train_time:79316ms step_avg:96.61ms
step:822/1695 train_time:79412ms step_avg:96.61ms
step:823/1695 train_time:79508ms step_avg:96.61ms
step:824/1695 train_time:79604ms step_avg:96.61ms
step:825/1695 train_time:79700ms step_avg:96.61ms
step:826/1695 train_time:79796ms step_avg:96.60ms
step:827/1695 train_time:79892ms step_avg:96.61ms
step:828/1695 train_time:79989ms step_avg:96.61ms
step:829/1695 train_time:80084ms step_avg:96.60ms
step:830/1695 train_time:80180ms step_avg:96.60ms
step:831/1695 train_time:80276ms step_avg:96.60ms
step:832/1695 train_time:80373ms step_avg:96.60ms
step:833/1695 train_time:80469ms step_avg:96.60ms
step:834/1695 train_time:80565ms step_avg:96.60ms
step:835/1695 train_time:80660ms step_avg:96.60ms
step:836/1695 train_time:80756ms step_avg:96.60ms
step:837/1695 train_time:80853ms step_avg:96.60ms
step:838/1695 train_time:80949ms step_avg:96.60ms
step:839/1695 train_time:81045ms step_avg:96.60ms
step:840/1695 train_time:81141ms step_avg:96.60ms
step:841/1695 train_time:81237ms step_avg:96.60ms
step:842/1695 train_time:81333ms step_avg:96.59ms
step:843/1695 train_time:81429ms step_avg:96.59ms
step:844/1695 train_time:81524ms step_avg:96.59ms
step:845/1695 train_time:81619ms step_avg:96.59ms
step:846/1695 train_time:81716ms step_avg:96.59ms
step:847/1695 train_time:81812ms step_avg:96.59ms
step:848/1695 train_time:81908ms step_avg:96.59ms
step:849/1695 train_time:82003ms step_avg:96.59ms
step:850/1695 train_time:82099ms step_avg:96.59ms
step:851/1695 train_time:82196ms step_avg:96.59ms
step:852/1695 train_time:82292ms step_avg:96.59ms
step:853/1695 train_time:82388ms step_avg:96.59ms
step:854/1695 train_time:82484ms step_avg:96.59ms
step:855/1695 train_time:82579ms step_avg:96.58ms
step:856/1695 train_time:82676ms step_avg:96.58ms
step:857/1695 train_time:82773ms step_avg:96.58ms
step:858/1695 train_time:82869ms step_avg:96.58ms
step:859/1695 train_time:82964ms step_avg:96.58ms
step:860/1695 train_time:83060ms step_avg:96.58ms
step:861/1695 train_time:83156ms step_avg:96.58ms
step:862/1695 train_time:83252ms step_avg:96.58ms
step:863/1695 train_time:83584ms step_avg:96.85ms
step:864/1695 train_time:83778ms step_avg:96.96ms
step:865/1695 train_time:83872ms step_avg:96.96ms
step:866/1695 train_time:83966ms step_avg:96.96ms
step:867/1695 train_time:84061ms step_avg:96.96ms
step:868/1695 train_time:84156ms step_avg:96.95ms
step:869/1695 train_time:84250ms step_avg:96.95ms
step:870/1695 train_time:84345ms step_avg:96.95ms
step:871/1695 train_time:84440ms step_avg:96.95ms
step:872/1695 train_time:84535ms step_avg:96.94ms
step:873/1695 train_time:84637ms step_avg:96.95ms
step:874/1695 train_time:84737ms step_avg:96.95ms
step:875/1695 train_time:84837ms step_avg:96.96ms
step:875/1695 val_loss:3.5244 train_time:84933ms step_avg:97.07ms
step:876/1695 train_time:84957ms step_avg:96.98ms
step:877/1695 train_time:85038ms step_avg:96.96ms
step:878/1695 train_time:85138ms step_avg:96.97ms
step:879/1695 train_time:85235ms step_avg:96.97ms
step:880/1695 train_time:85330ms step_avg:96.97ms
step:881/1695 train_time:85425ms step_avg:96.96ms
step:882/1695 train_time:85520ms step_avg:96.96ms
step:883/1695 train_time:85614ms step_avg:96.96ms
step:884/1695 train_time:85709ms step_avg:96.96ms
step:885/1695 train_time:85804ms step_avg:96.95ms
step:886/1695 train_time:85901ms step_avg:96.95ms
step:887/1695 train_time:86000ms step_avg:96.96ms
step:888/1695 train_time:86100ms step_avg:96.96ms
step:889/1695 train_time:86198ms step_avg:96.96ms
step:890/1695 train_time:86295ms step_avg:96.96ms
step:891/1695 train_time:86391ms step_avg:96.96ms
step:892/1695 train_time:86486ms step_avg:96.96ms
step:893/1695 train_time:86581ms step_avg:96.96ms
step:894/1695 train_time:86677ms step_avg:96.95ms
step:895/1695 train_time:86772ms step_avg:96.95ms
step:896/1695 train_time:86868ms step_avg:96.95ms
step:897/1695 train_time:86964ms step_avg:96.95ms
step:898/1695 train_time:87062ms step_avg:96.95ms
step:899/1695 train_time:87159ms step_avg:96.95ms
step:900/1695 train_time:87256ms step_avg:96.95ms
step:901/1695 train_time:87351ms step_avg:96.95ms
step:902/1695 train_time:87447ms step_avg:96.95ms
step:903/1695 train_time:87542ms step_avg:96.95ms
step:904/1695 train_time:87638ms step_avg:96.95ms
step:905/1695 train_time:87734ms step_avg:96.94ms
step:906/1695 train_time:87829ms step_avg:96.94ms
step:907/1695 train_time:87925ms step_avg:96.94ms
step:908/1695 train_time:88021ms step_avg:96.94ms
step:909/1695 train_time:88118ms step_avg:96.94ms
step:910/1695 train_time:88216ms step_avg:96.94ms
step:911/1695 train_time:88312ms step_avg:96.94ms
step:912/1695 train_time:88407ms step_avg:96.94ms
step:913/1695 train_time:88503ms step_avg:96.94ms
step:914/1695 train_time:88599ms step_avg:96.94ms
step:915/1695 train_time:88695ms step_avg:96.93ms
step:916/1695 train_time:88791ms step_avg:96.93ms
step:917/1695 train_time:88887ms step_avg:96.93ms
step:918/1695 train_time:88983ms step_avg:96.93ms
step:919/1695 train_time:89080ms step_avg:96.93ms
step:920/1695 train_time:89177ms step_avg:96.93ms
step:921/1695 train_time:89274ms step_avg:96.93ms
step:922/1695 train_time:89370ms step_avg:96.93ms
step:923/1695 train_time:89467ms step_avg:96.93ms
step:924/1695 train_time:89562ms step_avg:96.93ms
step:925/1695 train_time:89658ms step_avg:96.93ms
step:926/1695 train_time:89752ms step_avg:96.92ms
step:927/1695 train_time:89848ms step_avg:96.92ms
step:928/1695 train_time:89944ms step_avg:96.92ms
step:929/1695 train_time:90041ms step_avg:96.92ms
step:930/1695 train_time:90138ms step_avg:96.92ms
step:931/1695 train_time:90235ms step_avg:96.92ms
step:932/1695 train_time:90332ms step_avg:96.92ms
step:933/1695 train_time:90428ms step_avg:96.92ms
step:934/1695 train_time:90523ms step_avg:96.92ms
step:935/1695 train_time:90620ms step_avg:96.92ms
step:936/1695 train_time:90717ms step_avg:96.92ms
step:937/1695 train_time:90813ms step_avg:96.92ms
step:938/1695 train_time:90908ms step_avg:96.92ms
step:939/1695 train_time:91003ms step_avg:96.92ms
step:940/1695 train_time:91099ms step_avg:96.91ms
step:941/1695 train_time:91195ms step_avg:96.91ms
step:942/1695 train_time:91291ms step_avg:96.91ms
step:943/1695 train_time:91386ms step_avg:96.91ms
step:944/1695 train_time:91482ms step_avg:96.91ms
step:945/1695 train_time:91578ms step_avg:96.91ms
step:946/1695 train_time:91675ms step_avg:96.91ms
step:947/1695 train_time:91771ms step_avg:96.91ms
step:948/1695 train_time:91866ms step_avg:96.91ms
step:949/1695 train_time:91962ms step_avg:96.90ms
step:950/1695 train_time:92057ms step_avg:96.90ms
step:951/1695 train_time:92153ms step_avg:96.90ms
step:952/1695 train_time:92249ms step_avg:96.90ms
step:953/1695 train_time:92345ms step_avg:96.90ms
step:954/1695 train_time:92441ms step_avg:96.90ms
step:955/1695 train_time:92538ms step_avg:96.90ms
step:956/1695 train_time:92636ms step_avg:96.90ms
step:957/1695 train_time:92732ms step_avg:96.90ms
step:958/1695 train_time:92827ms step_avg:96.90ms
step:959/1695 train_time:92923ms step_avg:96.90ms
step:960/1695 train_time:93018ms step_avg:96.89ms
step:961/1695 train_time:93114ms step_avg:96.89ms
step:962/1695 train_time:93210ms step_avg:96.89ms
step:963/1695 train_time:93305ms step_avg:96.89ms
step:964/1695 train_time:93401ms step_avg:96.89ms
step:965/1695 train_time:93496ms step_avg:96.89ms
step:966/1695 train_time:93592ms step_avg:96.89ms
step:967/1695 train_time:93688ms step_avg:96.88ms
step:968/1695 train_time:93783ms step_avg:96.88ms
step:969/1695 train_time:93880ms step_avg:96.88ms
step:970/1695 train_time:93976ms step_avg:96.88ms
step:971/1695 train_time:94073ms step_avg:96.88ms
step:972/1695 train_time:94168ms step_avg:96.88ms
step:973/1695 train_time:94263ms step_avg:96.88ms
step:974/1695 train_time:94360ms step_avg:96.88ms
step:975/1695 train_time:94456ms step_avg:96.88ms
step:976/1695 train_time:94553ms step_avg:96.88ms
step:977/1695 train_time:94648ms step_avg:96.88ms
step:978/1695 train_time:94743ms step_avg:96.87ms
step:979/1695 train_time:94840ms step_avg:96.87ms
step:980/1695 train_time:94937ms step_avg:96.87ms
step:981/1695 train_time:95033ms step_avg:96.87ms
step:982/1695 train_time:95129ms step_avg:96.87ms
step:983/1695 train_time:95224ms step_avg:96.87ms
step:984/1695 train_time:95320ms step_avg:96.87ms
step:985/1695 train_time:95416ms step_avg:96.87ms
step:986/1695 train_time:95512ms step_avg:96.87ms
step:987/1695 train_time:95608ms step_avg:96.87ms
step:988/1695 train_time:95703ms step_avg:96.87ms
step:989/1695 train_time:95799ms step_avg:96.86ms
step:990/1695 train_time:95895ms step_avg:96.86ms
step:991/1695 train_time:95991ms step_avg:96.86ms
step:992/1695 train_time:96087ms step_avg:96.86ms
step:993/1695 train_time:96183ms step_avg:96.86ms
step:994/1695 train_time:96280ms step_avg:96.86ms
step:995/1695 train_time:96375ms step_avg:96.86ms
step:996/1695 train_time:96471ms step_avg:96.86ms
step:997/1695 train_time:96566ms step_avg:96.86ms
step:998/1695 train_time:96663ms step_avg:96.86ms
step:999/1695 train_time:96758ms step_avg:96.85ms
step:1000/1695 train_time:96854ms step_avg:96.85ms
step:1000/1695 val_loss:3.4839 train_time:96948ms step_avg:96.95ms
step:1001/1695 train_time:96972ms step_avg:96.88ms
step:1002/1695 train_time:97055ms step_avg:96.86ms
step:1003/1695 train_time:97153ms step_avg:96.86ms
step:1004/1695 train_time:97250ms step_avg:96.86ms
step:1005/1695 train_time:97345ms step_avg:96.86ms
step:1006/1695 train_time:97440ms step_avg:96.86ms
step:1007/1695 train_time:97534ms step_avg:96.86ms
step:1008/1695 train_time:97629ms step_avg:96.85ms
step:1009/1695 train_time:97724ms step_avg:96.85ms
step:1010/1695 train_time:97819ms step_avg:96.85ms
step:1011/1695 train_time:97914ms step_avg:96.85ms
step:1012/1695 train_time:98013ms step_avg:96.85ms
step:1013/1695 train_time:98112ms step_avg:96.85ms
step:1014/1695 train_time:98211ms step_avg:96.86ms
step:1015/1695 train_time:98309ms step_avg:96.86ms
step:1016/1695 train_time:98406ms step_avg:96.86ms
step:1017/1695 train_time:98501ms step_avg:96.85ms
step:1018/1695 train_time:98596ms step_avg:96.85ms
step:1019/1695 train_time:98690ms step_avg:96.85ms
step:1020/1695 train_time:98786ms step_avg:96.85ms
step:1021/1695 train_time:98883ms step_avg:96.85ms
step:1022/1695 train_time:98979ms step_avg:96.85ms
step:1023/1695 train_time:99077ms step_avg:96.85ms
step:1024/1695 train_time:99173ms step_avg:96.85ms
step:1025/1695 train_time:99270ms step_avg:96.85ms
step:1026/1695 train_time:99366ms step_avg:96.85ms
step:1027/1695 train_time:99462ms step_avg:96.85ms
step:1028/1695 train_time:99556ms step_avg:96.84ms
step:1029/1695 train_time:99651ms step_avg:96.84ms
step:1030/1695 train_time:99746ms step_avg:96.84ms
step:1031/1695 train_time:99842ms step_avg:96.84ms
step:1032/1695 train_time:99938ms step_avg:96.84ms
step:1033/1695 train_time:100035ms step_avg:96.84ms
step:1034/1695 train_time:100131ms step_avg:96.84ms
step:1035/1695 train_time:100228ms step_avg:96.84ms
step:1036/1695 train_time:100552ms step_avg:97.06ms
step:1037/1695 train_time:100740ms step_avg:97.15ms
step:1038/1695 train_time:100833ms step_avg:97.14ms
step:1039/1695 train_time:100928ms step_avg:97.14ms
step:1040/1695 train_time:101024ms step_avg:97.14ms
step:1041/1695 train_time:101118ms step_avg:97.14ms
step:1042/1695 train_time:101212ms step_avg:97.13ms
step:1043/1695 train_time:101307ms step_avg:97.13ms
step:1044/1695 train_time:101402ms step_avg:97.13ms
step:1045/1695 train_time:101497ms step_avg:97.13ms
step:1046/1695 train_time:101598ms step_avg:97.13ms
step:1047/1695 train_time:101696ms step_avg:97.13ms
step:1048/1695 train_time:101794ms step_avg:97.13ms
step:1049/1695 train_time:101890ms step_avg:97.13ms
step:1050/1695 train_time:101986ms step_avg:97.13ms
step:1051/1695 train_time:102083ms step_avg:97.13ms
step:1052/1695 train_time:102178ms step_avg:97.13ms
step:1053/1695 train_time:102272ms step_avg:97.12ms
step:1054/1695 train_time:102367ms step_avg:97.12ms
step:1055/1695 train_time:102462ms step_avg:97.12ms
step:1056/1695 train_time:102560ms step_avg:97.12ms
step:1057/1695 train_time:102656ms step_avg:97.12ms
step:1058/1695 train_time:102753ms step_avg:97.12ms
step:1059/1695 train_time:102850ms step_avg:97.12ms
step:1060/1695 train_time:102947ms step_avg:97.12ms
step:1061/1695 train_time:103044ms step_avg:97.12ms
step:1062/1695 train_time:103140ms step_avg:97.12ms
step:1063/1695 train_time:103235ms step_avg:97.12ms
step:1064/1695 train_time:103330ms step_avg:97.11ms
step:1065/1695 train_time:103425ms step_avg:97.11ms
step:1066/1695 train_time:103521ms step_avg:97.11ms
step:1067/1695 train_time:103617ms step_avg:97.11ms
step:1068/1695 train_time:103714ms step_avg:97.11ms
step:1069/1695 train_time:103810ms step_avg:97.11ms
step:1070/1695 train_time:103907ms step_avg:97.11ms
step:1071/1695 train_time:104004ms step_avg:97.11ms
step:1072/1695 train_time:104100ms step_avg:97.11ms
step:1073/1695 train_time:104195ms step_avg:97.11ms
step:1074/1695 train_time:104289ms step_avg:97.10ms
step:1075/1695 train_time:104385ms step_avg:97.10ms
step:1076/1695 train_time:104481ms step_avg:97.10ms
step:1077/1695 train_time:104578ms step_avg:97.10ms
step:1078/1695 train_time:104673ms step_avg:97.10ms
step:1079/1695 train_time:104769ms step_avg:97.10ms
step:1080/1695 train_time:104865ms step_avg:97.10ms
step:1081/1695 train_time:104961ms step_avg:97.10ms
step:1082/1695 train_time:105056ms step_avg:97.09ms
step:1083/1695 train_time:105152ms step_avg:97.09ms
step:1084/1695 train_time:105248ms step_avg:97.09ms
step:1085/1695 train_time:105344ms step_avg:97.09ms
step:1086/1695 train_time:105439ms step_avg:97.09ms
step:1087/1695 train_time:105535ms step_avg:97.09ms
step:1088/1695 train_time:105631ms step_avg:97.09ms
step:1089/1695 train_time:105729ms step_avg:97.09ms
step:1090/1695 train_time:105825ms step_avg:97.09ms
step:1091/1695 train_time:105922ms step_avg:97.09ms
step:1092/1695 train_time:106018ms step_avg:97.09ms
step:1093/1695 train_time:106114ms step_avg:97.08ms
step:1094/1695 train_time:106209ms step_avg:97.08ms
step:1095/1695 train_time:106306ms step_avg:97.08ms
step:1096/1695 train_time:106402ms step_avg:97.08ms
step:1097/1695 train_time:106497ms step_avg:97.08ms
step:1098/1695 train_time:106592ms step_avg:97.08ms
step:1099/1695 train_time:106688ms step_avg:97.08ms
step:1100/1695 train_time:106785ms step_avg:97.08ms
step:1101/1695 train_time:106882ms step_avg:97.08ms
step:1102/1695 train_time:106978ms step_avg:97.08ms
step:1103/1695 train_time:107073ms step_avg:97.07ms
step:1104/1695 train_time:107169ms step_avg:97.07ms
step:1105/1695 train_time:107265ms step_avg:97.07ms
step:1106/1695 train_time:107362ms step_avg:97.07ms
step:1107/1695 train_time:107457ms step_avg:97.07ms
step:1108/1695 train_time:107552ms step_avg:97.07ms
step:1109/1695 train_time:107648ms step_avg:97.07ms
step:1110/1695 train_time:107745ms step_avg:97.07ms
step:1111/1695 train_time:107841ms step_avg:97.07ms
step:1112/1695 train_time:107938ms step_avg:97.07ms
step:1113/1695 train_time:108034ms step_avg:97.07ms
step:1114/1695 train_time:108130ms step_avg:97.06ms
step:1115/1695 train_time:108227ms step_avg:97.06ms
step:1116/1695 train_time:108323ms step_avg:97.06ms
step:1117/1695 train_time:108419ms step_avg:97.06ms
step:1118/1695 train_time:108515ms step_avg:97.06ms
step:1119/1695 train_time:108611ms step_avg:97.06ms
step:1120/1695 train_time:108708ms step_avg:97.06ms
step:1121/1695 train_time:108804ms step_avg:97.06ms
step:1122/1695 train_time:108901ms step_avg:97.06ms
step:1123/1695 train_time:108995ms step_avg:97.06ms
step:1124/1695 train_time:109090ms step_avg:97.06ms
step:1125/1695 train_time:109187ms step_avg:97.06ms
step:1125/1695 val_loss:3.4370 train_time:109281ms step_avg:97.14ms
step:1126/1695 train_time:109306ms step_avg:97.08ms
step:1127/1695 train_time:109389ms step_avg:97.06ms
step:1128/1695 train_time:109486ms step_avg:97.06ms
step:1129/1695 train_time:109581ms step_avg:97.06ms
step:1130/1695 train_time:109676ms step_avg:97.06ms
step:1131/1695 train_time:109771ms step_avg:97.06ms
step:1132/1695 train_time:109865ms step_avg:97.05ms
step:1133/1695 train_time:109961ms step_avg:97.05ms
step:1134/1695 train_time:110058ms step_avg:97.05ms
step:1135/1695 train_time:110154ms step_avg:97.05ms
step:1136/1695 train_time:110253ms step_avg:97.05ms
step:1137/1695 train_time:110354ms step_avg:97.06ms
step:1138/1695 train_time:110454ms step_avg:97.06ms
step:1139/1695 train_time:110552ms step_avg:97.06ms
step:1140/1695 train_time:110650ms step_avg:97.06ms
step:1141/1695 train_time:110746ms step_avg:97.06ms
step:1142/1695 train_time:110842ms step_avg:97.06ms
step:1143/1695 train_time:110939ms step_avg:97.06ms
step:1144/1695 train_time:111035ms step_avg:97.06ms
step:1145/1695 train_time:111133ms step_avg:97.06ms
step:1146/1695 train_time:111230ms step_avg:97.06ms
step:1147/1695 train_time:111329ms step_avg:97.06ms
step:1148/1695 train_time:111428ms step_avg:97.06ms
step:1149/1695 train_time:111526ms step_avg:97.06ms
step:1150/1695 train_time:111624ms step_avg:97.06ms
step:1151/1695 train_time:111721ms step_avg:97.06ms
step:1152/1695 train_time:111819ms step_avg:97.06ms
step:1153/1695 train_time:111916ms step_avg:97.06ms
step:1154/1695 train_time:112013ms step_avg:97.06ms
step:1155/1695 train_time:112110ms step_avg:97.06ms
step:1156/1695 train_time:112207ms step_avg:97.07ms
step:1157/1695 train_time:112305ms step_avg:97.07ms
step:1158/1695 train_time:112403ms step_avg:97.07ms
step:1159/1695 train_time:112502ms step_avg:97.07ms
step:1160/1695 train_time:112601ms step_avg:97.07ms
step:1161/1695 train_time:112699ms step_avg:97.07ms
step:1162/1695 train_time:112796ms step_avg:97.07ms
step:1163/1695 train_time:112894ms step_avg:97.07ms
step:1164/1695 train_time:112991ms step_avg:97.07ms
step:1165/1695 train_time:113088ms step_avg:97.07ms
step:1166/1695 train_time:113185ms step_avg:97.07ms
step:1167/1695 train_time:113282ms step_avg:97.07ms
step:1168/1695 train_time:113380ms step_avg:97.07ms
step:1169/1695 train_time:113479ms step_avg:97.07ms
step:1170/1695 train_time:113579ms step_avg:97.08ms
step:1171/1695 train_time:113676ms step_avg:97.08ms
step:1172/1695 train_time:113774ms step_avg:97.08ms
step:1173/1695 train_time:113870ms step_avg:97.08ms
step:1174/1695 train_time:113966ms step_avg:97.08ms
step:1175/1695 train_time:114063ms step_avg:97.07ms
step:1176/1695 train_time:114161ms step_avg:97.08ms
step:1177/1695 train_time:114259ms step_avg:97.08ms
step:1178/1695 train_time:114357ms step_avg:97.08ms
step:1179/1695 train_time:114455ms step_avg:97.08ms
step:1180/1695 train_time:114553ms step_avg:97.08ms
step:1181/1695 train_time:114651ms step_avg:97.08ms
step:1182/1695 train_time:114748ms step_avg:97.08ms
step:1183/1695 train_time:114845ms step_avg:97.08ms
step:1184/1695 train_time:114942ms step_avg:97.08ms
step:1185/1695 train_time:115041ms step_avg:97.08ms
step:1186/1695 train_time:115140ms step_avg:97.08ms
step:1187/1695 train_time:115238ms step_avg:97.08ms
step:1188/1695 train_time:115337ms step_avg:97.09ms
step:1189/1695 train_time:115435ms step_avg:97.09ms
step:1190/1695 train_time:115533ms step_avg:97.09ms
step:1191/1695 train_time:115632ms step_avg:97.09ms
step:1192/1695 train_time:115730ms step_avg:97.09ms
step:1193/1695 train_time:115826ms step_avg:97.09ms
step:1194/1695 train_time:115923ms step_avg:97.09ms
step:1195/1695 train_time:116021ms step_avg:97.09ms
step:1196/1695 train_time:116119ms step_avg:97.09ms
step:1197/1695 train_time:116216ms step_avg:97.09ms
step:1198/1695 train_time:116313ms step_avg:97.09ms
step:1199/1695 train_time:116411ms step_avg:97.09ms
step:1200/1695 train_time:116508ms step_avg:97.09ms
step:1201/1695 train_time:116605ms step_avg:97.09ms
step:1202/1695 train_time:116704ms step_avg:97.09ms
step:1203/1695 train_time:116801ms step_avg:97.09ms
step:1204/1695 train_time:116899ms step_avg:97.09ms
step:1205/1695 train_time:116997ms step_avg:97.09ms
step:1206/1695 train_time:117095ms step_avg:97.09ms
step:1207/1695 train_time:117193ms step_avg:97.09ms
step:1208/1695 train_time:117515ms step_avg:97.28ms
step:1209/1695 train_time:117719ms step_avg:97.37ms
step:1210/1695 train_time:117814ms step_avg:97.37ms
step:1211/1695 train_time:117911ms step_avg:97.37ms
step:1212/1695 train_time:118008ms step_avg:97.37ms
step:1213/1695 train_time:118103ms step_avg:97.36ms
step:1214/1695 train_time:118200ms step_avg:97.36ms
step:1215/1695 train_time:118297ms step_avg:97.36ms
step:1216/1695 train_time:118393ms step_avg:97.36ms
step:1217/1695 train_time:118491ms step_avg:97.36ms
step:1218/1695 train_time:118592ms step_avg:97.37ms
step:1219/1695 train_time:118695ms step_avg:97.37ms
step:1220/1695 train_time:118794ms step_avg:97.37ms
step:1221/1695 train_time:118893ms step_avg:97.37ms
step:1222/1695 train_time:118990ms step_avg:97.37ms
step:1223/1695 train_time:119087ms step_avg:97.37ms
step:1224/1695 train_time:119183ms step_avg:97.37ms
step:1225/1695 train_time:119281ms step_avg:97.37ms
step:1226/1695 train_time:119378ms step_avg:97.37ms
step:1227/1695 train_time:119475ms step_avg:97.37ms
step:1228/1695 train_time:119573ms step_avg:97.37ms
step:1229/1695 train_time:119673ms step_avg:97.37ms
step:1230/1695 train_time:119772ms step_avg:97.38ms
step:1231/1695 train_time:119870ms step_avg:97.38ms
step:1232/1695 train_time:119966ms step_avg:97.38ms
step:1233/1695 train_time:120064ms step_avg:97.38ms
step:1234/1695 train_time:120162ms step_avg:97.38ms
step:1235/1695 train_time:120259ms step_avg:97.38ms
step:1236/1695 train_time:120357ms step_avg:97.38ms
step:1237/1695 train_time:120454ms step_avg:97.38ms
step:1238/1695 train_time:120552ms step_avg:97.38ms
step:1239/1695 train_time:120650ms step_avg:97.38ms
step:1240/1695 train_time:120748ms step_avg:97.38ms
step:1241/1695 train_time:120845ms step_avg:97.38ms
step:1242/1695 train_time:120944ms step_avg:97.38ms
step:1243/1695 train_time:121041ms step_avg:97.38ms
step:1244/1695 train_time:121139ms step_avg:97.38ms
step:1245/1695 train_time:121235ms step_avg:97.38ms
step:1246/1695 train_time:121332ms step_avg:97.38ms
step:1247/1695 train_time:121429ms step_avg:97.38ms
step:1248/1695 train_time:121527ms step_avg:97.38ms
step:1249/1695 train_time:121625ms step_avg:97.38ms
step:1250/1695 train_time:121724ms step_avg:97.38ms
step:1250/1695 val_loss:3.3885 train_time:121819ms step_avg:97.46ms
step:1251/1695 train_time:121843ms step_avg:97.40ms
step:1252/1695 train_time:121929ms step_avg:97.39ms
step:1253/1695 train_time:122027ms step_avg:97.39ms
step:1254/1695 train_time:122123ms step_avg:97.39ms
step:1255/1695 train_time:122220ms step_avg:97.39ms
step:1256/1695 train_time:122317ms step_avg:97.39ms
step:1257/1695 train_time:122414ms step_avg:97.39ms
step:1258/1695 train_time:122510ms step_avg:97.38ms
step:1259/1695 train_time:122606ms step_avg:97.38ms
step:1260/1695 train_time:122703ms step_avg:97.38ms
step:1261/1695 train_time:122803ms step_avg:97.39ms
step:1262/1695 train_time:122905ms step_avg:97.39ms
step:1263/1695 train_time:123004ms step_avg:97.39ms
step:1264/1695 train_time:123101ms step_avg:97.39ms
step:1265/1695 train_time:123199ms step_avg:97.39ms
step:1266/1695 train_time:123296ms step_avg:97.39ms
step:1267/1695 train_time:123393ms step_avg:97.39ms
step:1268/1695 train_time:123490ms step_avg:97.39ms
step:1269/1695 train_time:123587ms step_avg:97.39ms
step:1270/1695 train_time:123686ms step_avg:97.39ms
step:1271/1695 train_time:123781ms step_avg:97.39ms
step:1272/1695 train_time:123881ms step_avg:97.39ms
step:1273/1695 train_time:123982ms step_avg:97.39ms
step:1274/1695 train_time:124082ms step_avg:97.40ms
step:1275/1695 train_time:124180ms step_avg:97.40ms
step:1276/1695 train_time:124278ms step_avg:97.40ms
step:1277/1695 train_time:124376ms step_avg:97.40ms
step:1278/1695 train_time:124474ms step_avg:97.40ms
step:1279/1695 train_time:124570ms step_avg:97.40ms
step:1280/1695 train_time:124666ms step_avg:97.40ms
step:1281/1695 train_time:124763ms step_avg:97.40ms
step:1282/1695 train_time:124862ms step_avg:97.40ms
step:1283/1695 train_time:124961ms step_avg:97.40ms
step:1284/1695 train_time:125061ms step_avg:97.40ms
step:1285/1695 train_time:125160ms step_avg:97.40ms
step:1286/1695 train_time:125258ms step_avg:97.40ms
step:1287/1695 train_time:125356ms step_avg:97.40ms
step:1288/1695 train_time:125454ms step_avg:97.40ms
step:1289/1695 train_time:125552ms step_avg:97.40ms
step:1290/1695 train_time:125649ms step_avg:97.40ms
step:1291/1695 train_time:125746ms step_avg:97.40ms
step:1292/1695 train_time:125843ms step_avg:97.40ms
step:1293/1695 train_time:125941ms step_avg:97.40ms
step:1294/1695 train_time:126039ms step_avg:97.40ms
step:1295/1695 train_time:126138ms step_avg:97.40ms
step:1296/1695 train_time:126237ms step_avg:97.40ms
step:1297/1695 train_time:126335ms step_avg:97.41ms
step:1298/1695 train_time:126432ms step_avg:97.41ms
step:1299/1695 train_time:126529ms step_avg:97.41ms
step:1300/1695 train_time:126626ms step_avg:97.40ms
step:1301/1695 train_time:126723ms step_avg:97.40ms
step:1302/1695 train_time:126821ms step_avg:97.40ms
step:1303/1695 train_time:126919ms step_avg:97.41ms
step:1304/1695 train_time:127018ms step_avg:97.41ms
step:1305/1695 train_time:127116ms step_avg:97.41ms
step:1306/1695 train_time:127214ms step_avg:97.41ms
step:1307/1695 train_time:127312ms step_avg:97.41ms
step:1308/1695 train_time:127410ms step_avg:97.41ms
step:1309/1695 train_time:127508ms step_avg:97.41ms
step:1310/1695 train_time:127605ms step_avg:97.41ms
step:1311/1695 train_time:127703ms step_avg:97.41ms
step:1312/1695 train_time:127800ms step_avg:97.41ms
step:1313/1695 train_time:127898ms step_avg:97.41ms
step:1314/1695 train_time:127996ms step_avg:97.41ms
step:1315/1695 train_time:128093ms step_avg:97.41ms
step:1316/1695 train_time:128191ms step_avg:97.41ms
step:1317/1695 train_time:128289ms step_avg:97.41ms
step:1318/1695 train_time:128386ms step_avg:97.41ms
step:1319/1695 train_time:128483ms step_avg:97.41ms
step:1320/1695 train_time:128582ms step_avg:97.41ms
step:1321/1695 train_time:128679ms step_avg:97.41ms
step:1322/1695 train_time:128777ms step_avg:97.41ms
step:1323/1695 train_time:128875ms step_avg:97.41ms
step:1324/1695 train_time:128973ms step_avg:97.41ms
step:1325/1695 train_time:129070ms step_avg:97.41ms
step:1326/1695 train_time:129168ms step_avg:97.41ms
step:1327/1695 train_time:129265ms step_avg:97.41ms
step:1328/1695 train_time:129363ms step_avg:97.41ms
step:1329/1695 train_time:129461ms step_avg:97.41ms
step:1330/1695 train_time:129559ms step_avg:97.41ms
step:1331/1695 train_time:129658ms step_avg:97.41ms
step:1332/1695 train_time:129756ms step_avg:97.41ms
step:1333/1695 train_time:129854ms step_avg:97.42ms
step:1334/1695 train_time:129952ms step_avg:97.42ms
step:1335/1695 train_time:130049ms step_avg:97.41ms
step:1336/1695 train_time:130146ms step_avg:97.41ms
step:1337/1695 train_time:130244ms step_avg:97.42ms
step:1338/1695 train_time:130342ms step_avg:97.42ms
step:1339/1695 train_time:130440ms step_avg:97.42ms
step:1340/1695 train_time:130539ms step_avg:97.42ms
step:1341/1695 train_time:130637ms step_avg:97.42ms
step:1342/1695 train_time:130735ms step_avg:97.42ms
step:1343/1695 train_time:130832ms step_avg:97.42ms
step:1344/1695 train_time:130929ms step_avg:97.42ms
step:1345/1695 train_time:131026ms step_avg:97.42ms
step:1346/1695 train_time:131124ms step_avg:97.42ms
step:1347/1695 train_time:131220ms step_avg:97.42ms
step:1348/1695 train_time:131318ms step_avg:97.42ms
step:1349/1695 train_time:131417ms step_avg:97.42ms
step:1350/1695 train_time:131515ms step_avg:97.42ms
step:1351/1695 train_time:131613ms step_avg:97.42ms
step:1352/1695 train_time:131710ms step_avg:97.42ms
step:1353/1695 train_time:131808ms step_avg:97.42ms
step:1354/1695 train_time:131905ms step_avg:97.42ms
step:1355/1695 train_time:132003ms step_avg:97.42ms
step:1356/1695 train_time:132102ms step_avg:97.42ms
step:1357/1695 train_time:132200ms step_avg:97.42ms
step:1358/1695 train_time:132297ms step_avg:97.42ms
step:1359/1695 train_time:132395ms step_avg:97.42ms
step:1360/1695 train_time:132492ms step_avg:97.42ms
step:1361/1695 train_time:132590ms step_avg:97.42ms
step:1362/1695 train_time:132688ms step_avg:97.42ms
step:1363/1695 train_time:132786ms step_avg:97.42ms
step:1364/1695 train_time:132883ms step_avg:97.42ms
step:1365/1695 train_time:132981ms step_avg:97.42ms
step:1366/1695 train_time:133080ms step_avg:97.42ms
step:1367/1695 train_time:133179ms step_avg:97.42ms
step:1368/1695 train_time:133277ms step_avg:97.42ms
step:1369/1695 train_time:133375ms step_avg:97.43ms
step:1370/1695 train_time:133473ms step_avg:97.43ms
step:1371/1695 train_time:133571ms step_avg:97.43ms
step:1372/1695 train_time:133669ms step_avg:97.43ms
step:1373/1695 train_time:133766ms step_avg:97.43ms
step:1374/1695 train_time:133863ms step_avg:97.43ms
step:1375/1695 train_time:133961ms step_avg:97.43ms
step:1375/1695 val_loss:3.3505 train_time:134057ms step_avg:97.50ms
step:1376/1695 train_time:134084ms step_avg:97.45ms
step:1377/1695 train_time:134163ms step_avg:97.43ms
step:1378/1695 train_time:134261ms step_avg:97.43ms
step:1379/1695 train_time:134359ms step_avg:97.43ms
step:1380/1695 train_time:134456ms step_avg:97.43ms
step:1381/1695 train_time:134781ms step_avg:97.60ms
step:1382/1695 train_time:134987ms step_avg:97.68ms
step:1383/1695 train_time:135083ms step_avg:97.67ms
step:1384/1695 train_time:135179ms step_avg:97.67ms
step:1385/1695 train_time:135276ms step_avg:97.67ms
step:1386/1695 train_time:135374ms step_avg:97.67ms
step:1387/1695 train_time:135471ms step_avg:97.67ms
step:1388/1695 train_time:135568ms step_avg:97.67ms
step:1389/1695 train_time:135665ms step_avg:97.67ms
step:1390/1695 train_time:135763ms step_avg:97.67ms
step:1391/1695 train_time:135867ms step_avg:97.68ms
step:1392/1695 train_time:135968ms step_avg:97.68ms
step:1393/1695 train_time:136065ms step_avg:97.68ms
step:1394/1695 train_time:136163ms step_avg:97.68ms
step:1395/1695 train_time:136260ms step_avg:97.68ms
step:1396/1695 train_time:136356ms step_avg:97.68ms
step:1397/1695 train_time:136453ms step_avg:97.68ms
step:1398/1695 train_time:136549ms step_avg:97.67ms
step:1399/1695 train_time:136646ms step_avg:97.67ms
step:1400/1695 train_time:136743ms step_avg:97.67ms
step:1401/1695 train_time:136841ms step_avg:97.67ms
step:1402/1695 train_time:136940ms step_avg:97.67ms
step:1403/1695 train_time:137039ms step_avg:97.68ms
step:1404/1695 train_time:137137ms step_avg:97.68ms
step:1405/1695 train_time:137234ms step_avg:97.68ms
step:1406/1695 train_time:137332ms step_avg:97.68ms
step:1407/1695 train_time:137429ms step_avg:97.67ms
step:1408/1695 train_time:137525ms step_avg:97.67ms
step:1409/1695 train_time:137622ms step_avg:97.67ms
step:1410/1695 train_time:137719ms step_avg:97.67ms
step:1411/1695 train_time:137817ms step_avg:97.67ms
step:1412/1695 train_time:137916ms step_avg:97.67ms
step:1413/1695 train_time:138014ms step_avg:97.67ms
step:1414/1695 train_time:138113ms step_avg:97.68ms
step:1415/1695 train_time:138212ms step_avg:97.68ms
step:1416/1695 train_time:138309ms step_avg:97.68ms
step:1417/1695 train_time:138405ms step_avg:97.67ms
step:1418/1695 train_time:138501ms step_avg:97.67ms
step:1419/1695 train_time:138598ms step_avg:97.67ms
step:1420/1695 train_time:138696ms step_avg:97.67ms
step:1421/1695 train_time:138794ms step_avg:97.67ms
step:1422/1695 train_time:138893ms step_avg:97.67ms
step:1423/1695 train_time:138990ms step_avg:97.67ms
step:1424/1695 train_time:139089ms step_avg:97.67ms
step:1425/1695 train_time:139188ms step_avg:97.68ms
step:1426/1695 train_time:139286ms step_avg:97.68ms
step:1427/1695 train_time:139382ms step_avg:97.68ms
step:1428/1695 train_time:139479ms step_avg:97.67ms
step:1429/1695 train_time:139577ms step_avg:97.67ms
step:1430/1695 train_time:139675ms step_avg:97.67ms
step:1431/1695 train_time:139772ms step_avg:97.67ms
step:1432/1695 train_time:139871ms step_avg:97.68ms
step:1433/1695 train_time:139969ms step_avg:97.68ms
step:1434/1695 train_time:140067ms step_avg:97.68ms
step:1435/1695 train_time:140164ms step_avg:97.68ms
step:1436/1695 train_time:140261ms step_avg:97.68ms
step:1437/1695 train_time:140358ms step_avg:97.67ms
step:1438/1695 train_time:140455ms step_avg:97.67ms
step:1439/1695 train_time:140553ms step_avg:97.67ms
step:1440/1695 train_time:140651ms step_avg:97.67ms
step:1441/1695 train_time:140749ms step_avg:97.67ms
step:1442/1695 train_time:140847ms step_avg:97.67ms
step:1443/1695 train_time:140945ms step_avg:97.68ms
step:1444/1695 train_time:141043ms step_avg:97.68ms
step:1445/1695 train_time:141140ms step_avg:97.67ms
step:1446/1695 train_time:141238ms step_avg:97.67ms
step:1447/1695 train_time:141335ms step_avg:97.67ms
step:1448/1695 train_time:141433ms step_avg:97.67ms
step:1449/1695 train_time:141530ms step_avg:97.67ms
step:1450/1695 train_time:141628ms step_avg:97.67ms
step:1451/1695 train_time:141725ms step_avg:97.67ms
step:1452/1695 train_time:141822ms step_avg:97.67ms
step:1453/1695 train_time:141920ms step_avg:97.67ms
step:1454/1695 train_time:142019ms step_avg:97.67ms
step:1455/1695 train_time:142118ms step_avg:97.68ms
step:1456/1695 train_time:142215ms step_avg:97.68ms
step:1457/1695 train_time:142313ms step_avg:97.68ms
step:1458/1695 train_time:142410ms step_avg:97.68ms
step:1459/1695 train_time:142507ms step_avg:97.67ms
step:1460/1695 train_time:142604ms step_avg:97.67ms
step:1461/1695 train_time:142701ms step_avg:97.67ms
step:1462/1695 train_time:142798ms step_avg:97.67ms
step:1463/1695 train_time:142896ms step_avg:97.67ms
step:1464/1695 train_time:142994ms step_avg:97.67ms
step:1465/1695 train_time:143092ms step_avg:97.67ms
step:1466/1695 train_time:143190ms step_avg:97.67ms
step:1467/1695 train_time:143287ms step_avg:97.67ms
step:1468/1695 train_time:143385ms step_avg:97.67ms
step:1469/1695 train_time:143482ms step_avg:97.67ms
step:1470/1695 train_time:143579ms step_avg:97.67ms
step:1471/1695 train_time:143678ms step_avg:97.67ms
step:1472/1695 train_time:143776ms step_avg:97.67ms
step:1473/1695 train_time:143873ms step_avg:97.67ms
step:1474/1695 train_time:143972ms step_avg:97.67ms
step:1475/1695 train_time:144070ms step_avg:97.67ms
step:1476/1695 train_time:144167ms step_avg:97.67ms
step:1477/1695 train_time:144265ms step_avg:97.67ms
step:1478/1695 train_time:144361ms step_avg:97.67ms
step:1479/1695 train_time:144459ms step_avg:97.67ms
step:1480/1695 train_time:144555ms step_avg:97.67ms
step:1481/1695 train_time:144653ms step_avg:97.67ms
step:1482/1695 train_time:144751ms step_avg:97.67ms
step:1483/1695 train_time:144849ms step_avg:97.67ms
step:1484/1695 train_time:144947ms step_avg:97.67ms
step:1485/1695 train_time:145044ms step_avg:97.67ms
step:1486/1695 train_time:145141ms step_avg:97.67ms
step:1487/1695 train_time:145239ms step_avg:97.67ms
step:1488/1695 train_time:145337ms step_avg:97.67ms
step:1489/1695 train_time:145435ms step_avg:97.67ms
step:1490/1695 train_time:145533ms step_avg:97.67ms
step:1491/1695 train_time:145630ms step_avg:97.67ms
step:1492/1695 train_time:145728ms step_avg:97.67ms
step:1493/1695 train_time:145825ms step_avg:97.67ms
step:1494/1695 train_time:145922ms step_avg:97.67ms
step:1495/1695 train_time:146020ms step_avg:97.67ms
step:1496/1695 train_time:146118ms step_avg:97.67ms
step:1497/1695 train_time:146216ms step_avg:97.67ms
step:1498/1695 train_time:146315ms step_avg:97.67ms
step:1499/1695 train_time:146413ms step_avg:97.67ms
step:1500/1695 train_time:146511ms step_avg:97.67ms
step:1500/1695 val_loss:3.3179 train_time:146606ms step_avg:97.74ms
step:1501/1695 train_time:146632ms step_avg:97.69ms
step:1502/1695 train_time:146715ms step_avg:97.68ms
step:1503/1695 train_time:146816ms step_avg:97.68ms
step:1504/1695 train_time:146914ms step_avg:97.68ms
step:1505/1695 train_time:147011ms step_avg:97.68ms
step:1506/1695 train_time:147108ms step_avg:97.68ms
step:1507/1695 train_time:147205ms step_avg:97.68ms
step:1508/1695 train_time:147301ms step_avg:97.68ms
step:1509/1695 train_time:147397ms step_avg:97.68ms
step:1510/1695 train_time:147494ms step_avg:97.68ms
step:1511/1695 train_time:147596ms step_avg:97.68ms
step:1512/1695 train_time:147698ms step_avg:97.68ms
step:1513/1695 train_time:147797ms step_avg:97.68ms
step:1514/1695 train_time:147896ms step_avg:97.69ms
step:1515/1695 train_time:147994ms step_avg:97.69ms
step:1516/1695 train_time:148092ms step_avg:97.69ms
step:1517/1695 train_time:148189ms step_avg:97.69ms
step:1518/1695 train_time:148286ms step_avg:97.68ms
step:1519/1695 train_time:148382ms step_avg:97.68ms
step:1520/1695 train_time:148478ms step_avg:97.68ms
step:1521/1695 train_time:148577ms step_avg:97.68ms
step:1522/1695 train_time:148678ms step_avg:97.69ms
step:1523/1695 train_time:148777ms step_avg:97.69ms
step:1524/1695 train_time:148876ms step_avg:97.69ms
step:1525/1695 train_time:148975ms step_avg:97.69ms
step:1526/1695 train_time:149074ms step_avg:97.69ms
step:1527/1695 train_time:149172ms step_avg:97.69ms
step:1528/1695 train_time:149269ms step_avg:97.69ms
step:1529/1695 train_time:149367ms step_avg:97.69ms
step:1530/1695 train_time:149465ms step_avg:97.69ms
step:1531/1695 train_time:149562ms step_avg:97.69ms
step:1532/1695 train_time:149660ms step_avg:97.69ms
step:1533/1695 train_time:149758ms step_avg:97.69ms
step:1534/1695 train_time:149856ms step_avg:97.69ms
step:1535/1695 train_time:149955ms step_avg:97.69ms
step:1536/1695 train_time:150054ms step_avg:97.69ms
step:1537/1695 train_time:150152ms step_avg:97.69ms
step:1538/1695 train_time:150249ms step_avg:97.69ms
step:1539/1695 train_time:150346ms step_avg:97.69ms
step:1540/1695 train_time:150443ms step_avg:97.69ms
step:1541/1695 train_time:150540ms step_avg:97.69ms
step:1542/1695 train_time:150638ms step_avg:97.69ms
step:1543/1695 train_time:150736ms step_avg:97.69ms
step:1544/1695 train_time:150835ms step_avg:97.69ms
step:1545/1695 train_time:150932ms step_avg:97.69ms
step:1546/1695 train_time:151030ms step_avg:97.69ms
step:1547/1695 train_time:151128ms step_avg:97.69ms
step:1548/1695 train_time:151225ms step_avg:97.69ms
step:1549/1695 train_time:151322ms step_avg:97.69ms
step:1550/1695 train_time:151419ms step_avg:97.69ms
step:1551/1695 train_time:151517ms step_avg:97.69ms
step:1552/1695 train_time:151888ms step_avg:97.87ms
step:1553/1695 train_time:151963ms step_avg:97.85ms
step:1554/1695 train_time:152058ms step_avg:97.85ms
step:1555/1695 train_time:152155ms step_avg:97.85ms
step:1556/1695 train_time:152252ms step_avg:97.85ms
step:1557/1695 train_time:152349ms step_avg:97.85ms
step:1558/1695 train_time:152445ms step_avg:97.85ms
step:1559/1695 train_time:152541ms step_avg:97.85ms
step:1560/1695 train_time:152638ms step_avg:97.84ms
step:1561/1695 train_time:152735ms step_avg:97.84ms
step:1562/1695 train_time:152839ms step_avg:97.85ms
step:1563/1695 train_time:152939ms step_avg:97.85ms
step:1564/1695 train_time:153039ms step_avg:97.85ms
step:1565/1695 train_time:153136ms step_avg:97.85ms
step:1566/1695 train_time:153235ms step_avg:97.85ms
step:1567/1695 train_time:153331ms step_avg:97.85ms
step:1568/1695 train_time:153428ms step_avg:97.85ms
step:1569/1695 train_time:153525ms step_avg:97.85ms
step:1570/1695 train_time:153622ms step_avg:97.85ms
step:1571/1695 train_time:153720ms step_avg:97.85ms
step:1572/1695 train_time:153819ms step_avg:97.85ms
step:1573/1695 train_time:153917ms step_avg:97.85ms
step:1574/1695 train_time:154017ms step_avg:97.85ms
step:1575/1695 train_time:154115ms step_avg:97.85ms
step:1576/1695 train_time:154215ms step_avg:97.85ms
step:1577/1695 train_time:154312ms step_avg:97.85ms
step:1578/1695 train_time:154410ms step_avg:97.85ms
step:1579/1695 train_time:154507ms step_avg:97.85ms
step:1580/1695 train_time:154604ms step_avg:97.85ms
step:1581/1695 train_time:154701ms step_avg:97.85ms
step:1582/1695 train_time:154798ms step_avg:97.85ms
step:1583/1695 train_time:154897ms step_avg:97.85ms
step:1584/1695 train_time:154996ms step_avg:97.85ms
step:1585/1695 train_time:155096ms step_avg:97.85ms
step:1586/1695 train_time:155195ms step_avg:97.85ms
step:1587/1695 train_time:155293ms step_avg:97.85ms
step:1588/1695 train_time:155391ms step_avg:97.85ms
step:1589/1695 train_time:155489ms step_avg:97.85ms
step:1590/1695 train_time:155586ms step_avg:97.85ms
step:1591/1695 train_time:155682ms step_avg:97.85ms
step:1592/1695 train_time:155779ms step_avg:97.85ms
step:1593/1695 train_time:155876ms step_avg:97.85ms
step:1594/1695 train_time:155976ms step_avg:97.85ms
step:1595/1695 train_time:156075ms step_avg:97.85ms
step:1596/1695 train_time:156175ms step_avg:97.85ms
step:1597/1695 train_time:156275ms step_avg:97.86ms
step:1598/1695 train_time:156375ms step_avg:97.86ms
step:1599/1695 train_time:156473ms step_avg:97.86ms
step:1600/1695 train_time:156571ms step_avg:97.86ms
step:1601/1695 train_time:156669ms step_avg:97.86ms
step:1602/1695 train_time:156767ms step_avg:97.86ms
step:1603/1695 train_time:156864ms step_avg:97.86ms
step:1604/1695 train_time:156962ms step_avg:97.86ms
step:1605/1695 train_time:157060ms step_avg:97.86ms
step:1606/1695 train_time:157159ms step_avg:97.86ms
step:1607/1695 train_time:157257ms step_avg:97.86ms
step:1608/1695 train_time:157354ms step_avg:97.86ms
step:1609/1695 train_time:157453ms step_avg:97.86ms
step:1610/1695 train_time:157551ms step_avg:97.86ms
step:1611/1695 train_time:157649ms step_avg:97.86ms
step:1612/1695 train_time:157747ms step_avg:97.86ms
step:1613/1695 train_time:157844ms step_avg:97.86ms
step:1614/1695 train_time:157942ms step_avg:97.86ms
step:1615/1695 train_time:158039ms step_avg:97.86ms
step:1616/1695 train_time:158137ms step_avg:97.86ms
step:1617/1695 train_time:158235ms step_avg:97.86ms
step:1618/1695 train_time:158333ms step_avg:97.86ms
step:1619/1695 train_time:158432ms step_avg:97.86ms
step:1620/1695 train_time:158530ms step_avg:97.86ms
step:1621/1695 train_time:158628ms step_avg:97.86ms
step:1622/1695 train_time:158726ms step_avg:97.86ms
step:1623/1695 train_time:158824ms step_avg:97.86ms
step:1624/1695 train_time:158922ms step_avg:97.86ms
step:1625/1695 train_time:159019ms step_avg:97.86ms
step:1625/1695 val_loss:3.2905 train_time:159114ms step_avg:97.92ms
step:1626/1695 train_time:159139ms step_avg:97.87ms
step:1627/1695 train_time:159222ms step_avg:97.86ms
step:1628/1695 train_time:159320ms step_avg:97.86ms
step:1629/1695 train_time:159418ms step_avg:97.86ms
step:1630/1695 train_time:159515ms step_avg:97.86ms
step:1631/1695 train_time:159612ms step_avg:97.86ms
step:1632/1695 train_time:159709ms step_avg:97.86ms
step:1633/1695 train_time:159806ms step_avg:97.86ms
step:1634/1695 train_time:159902ms step_avg:97.86ms
step:1635/1695 train_time:159999ms step_avg:97.86ms
step:1636/1695 train_time:160099ms step_avg:97.86ms
step:1637/1695 train_time:160200ms step_avg:97.86ms
step:1638/1695 train_time:160300ms step_avg:97.86ms
step:1639/1695 train_time:160398ms step_avg:97.86ms
step:1640/1695 train_time:160495ms step_avg:97.86ms
step:1641/1695 train_time:160592ms step_avg:97.86ms
step:1642/1695 train_time:160689ms step_avg:97.86ms
step:1643/1695 train_time:160786ms step_avg:97.86ms
step:1644/1695 train_time:160882ms step_avg:97.86ms
step:1645/1695 train_time:160980ms step_avg:97.86ms
step:1646/1695 train_time:161078ms step_avg:97.86ms
step:1647/1695 train_time:161177ms step_avg:97.86ms
step:1648/1695 train_time:161277ms step_avg:97.86ms
step:1649/1695 train_time:161378ms step_avg:97.86ms
step:1650/1695 train_time:161476ms step_avg:97.86ms
step:1651/1695 train_time:161573ms step_avg:97.86ms
step:1652/1695 train_time:161670ms step_avg:97.86ms
step:1653/1695 train_time:161767ms step_avg:97.86ms
step:1654/1695 train_time:161864ms step_avg:97.86ms
step:1655/1695 train_time:161961ms step_avg:97.86ms
step:1656/1695 train_time:162059ms step_avg:97.86ms
step:1657/1695 train_time:162157ms step_avg:97.86ms
step:1658/1695 train_time:162256ms step_avg:97.86ms
step:1659/1695 train_time:162356ms step_avg:97.86ms
step:1660/1695 train_time:162456ms step_avg:97.86ms
step:1661/1695 train_time:162555ms step_avg:97.87ms
step:1662/1695 train_time:162654ms step_avg:97.87ms
step:1663/1695 train_time:162751ms step_avg:97.87ms
step:1664/1695 train_time:162849ms step_avg:97.87ms
step:1665/1695 train_time:162946ms step_avg:97.87ms
step:1666/1695 train_time:163044ms step_avg:97.87ms
step:1667/1695 train_time:163142ms step_avg:97.87ms
step:1668/1695 train_time:163239ms step_avg:97.87ms
step:1669/1695 train_time:163337ms step_avg:97.87ms
step:1670/1695 train_time:163435ms step_avg:97.87ms
step:1671/1695 train_time:163534ms step_avg:97.87ms
step:1672/1695 train_time:163633ms step_avg:97.87ms
step:1673/1695 train_time:163731ms step_avg:97.87ms
step:1674/1695 train_time:163829ms step_avg:97.87ms
step:1675/1695 train_time:163927ms step_avg:97.87ms
step:1676/1695 train_time:164024ms step_avg:97.87ms
step:1677/1695 train_time:164122ms step_avg:97.87ms
step:1678/1695 train_time:164219ms step_avg:97.87ms
step:1679/1695 train_time:164317ms step_avg:97.87ms
step:1680/1695 train_time:164415ms step_avg:97.87ms
step:1681/1695 train_time:164513ms step_avg:97.87ms
step:1682/1695 train_time:164612ms step_avg:97.87ms
step:1683/1695 train_time:164710ms step_avg:97.87ms
step:1684/1695 train_time:164809ms step_avg:97.87ms
step:1685/1695 train_time:164906ms step_avg:97.87ms
step:1686/1695 train_time:165004ms step_avg:97.87ms
step:1687/1695 train_time:165101ms step_avg:97.87ms
step:1688/1695 train_time:165199ms step_avg:97.87ms
step:1689/1695 train_time:165296ms step_avg:97.87ms
step:1690/1695 train_time:165393ms step_avg:97.87ms
step:1691/1695 train_time:165491ms step_avg:97.87ms
step:1692/1695 train_time:165589ms step_avg:97.87ms
step:1693/1695 train_time:165686ms step_avg:97.87ms
step:1694/1695 train_time:165783ms step_avg:97.86ms
step:1695/1695 train_time:165881ms step_avg:97.86ms
step:1695/1695 val_loss:3.2790 train_time:165977ms step_avg:97.92ms
peak memory allocated: 34000 MiB reserved: 49756 MiB
